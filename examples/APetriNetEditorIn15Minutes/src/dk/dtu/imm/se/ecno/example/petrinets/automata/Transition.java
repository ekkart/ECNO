/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
package dk.dtu.imm.se.ecno.example.petrinets.automata;

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.ecnonets.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.ecnonets.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;

import PetriNets.Place; 

@SuppressWarnings("unused")
public class Transition extends AbstractPetrinetBehaviour<PetriNets.Transition> {
	
	public Transition(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (PetriNets.Transition) element, new int[]{}, new String[]{"t1"}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return true;
                    
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
		case 0:
            break;
                    
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			break;
						
		}
	}
	
	@Override
	public String[] getTransitionEventParameterNames(int transition, int event) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				return new String[] {};
			case 1:
				return new String[] {};
			case 2:
				return new String[] {};
            default: return new String[] {};
                }
		default: return new String[] {};
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		PetriNets.Transition self = self();
				
		switch (transition) {
		case 0: {
			dk.dtu.imm.se.ecno.example.petrinets.events.Remove r = 
			    (dk.dtu.imm.se.ecno.example.petrinets.events.Remove) choice.getEventValues("remove");
			dk.dtu.imm.se.ecno.example.petrinets.events.Add a = 
			    (dk.dtu.imm.se.ecno.example.petrinets.events.Add) choice.getEventValues("add");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			case 2:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		default: return null;
		}  
	}	

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		PetriNets.Transition self = self();
		
		switch (transition) {
		case 0: {
			dk.dtu.imm.se.ecno.example.petrinets.events.Remove r = 
                (dk.dtu.imm.se.ecno.example.petrinets.events.Remove) choice.getEventValues("remove");
			dk.dtu.imm.se.ecno.example.petrinets.events.Add a = 
                (dk.dtu.imm.se.ecno.example.petrinets.events.Add) choice.getEventValues("add");
			return true; 
		}
		default: return false;
		}  
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		PetriNets.Transition self = self();
		
		switch (transition) {
		case 0: {
			dk.dtu.imm.se.ecno.example.petrinets.events.Remove r =
                (dk.dtu.imm.se.ecno.example.petrinets.events.Remove) choice.getEventValues("remove");
			dk.dtu.imm.se.ecno.example.petrinets.events.Add a =
                (dk.dtu.imm.se.ecno.example.petrinets.events.Add) choice.getEventValues("add");
{
System.out.println("Transition " + self().getName() + " removing token from places:");
for (Place place: r.places) {
  System.out.print(place.getName() + " ");
}
System.out.println();
System.out.println("Transition " + self().getName() + " adding token to places:");
for (Place place: a.places) {
  System.out.print(place.getName() + " ");
}
System.out.println();
}
            fire(transition);
			return; 
		}
		default: return;
		}  
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "fire", "remove", "add" };
		default: return null;
		}  
	}
		
}

