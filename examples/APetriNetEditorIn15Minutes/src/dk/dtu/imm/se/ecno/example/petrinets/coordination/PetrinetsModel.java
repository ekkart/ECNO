/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package dk.dtu.imm.se.ecno.example.petrinets.coordination;

import org.eclipse.emf.common.util.EList;

import PetriNets.PetriNetsPackage;
import dk.dtu.imm.se.ecno.example.petrinets.automata.PetrinetsBehaviour;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class PetrinetsModel extends EMFPackageAdapter {

	private FormalParameter formalparameter_remove_places;
	private FormalParameter formalparameter_add_places;
	private FormalParameter formalparameter_removeToken_token;

	private EventType eventtype_fire;
	private EventType eventtype_remove;
	private EventType eventtype_add;
	private EventType eventtype_removeToken;


	private ElementType elementtype_Transition;
	private ElementType elementtype_Arc;
	private ElementType elementtype_Place;
	private ElementType elementtype_Token;

	private Reference referencetype_Transition_out;
	private Reference referencetype_Transition_in;
	private Reference referencetype_Arc_target;
	private Reference referencetype_Arc_source;
	private Reference referencetype_Place_token;


	private PetrinetsModel(ExecutionEngine engine) {
		super (new PetrinetsBehaviour(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		PetriNetsPackage pack = PetriNetsPackage.eINSTANCE;

		getNamespace().setEPackage(pack);
		getNamespace().setUri("PetriNets.ECNO");

		formalparameter_remove_places = ecno_factory.createFormalParameter();
		formalparameter_remove_places.setName("places");
		formalparameter_remove_places.setEType(pack.getPlace());
		formalparameter_remove_places.setCollective(true);
		formalparameter_add_places = ecno_factory.createFormalParameter();
		formalparameter_add_places.setName("places");
		formalparameter_add_places.setEType(pack.getPlace());
		formalparameter_add_places.setCollective(true);
		formalparameter_removeToken_token = ecno_factory.createFormalParameter();
		formalparameter_removeToken_token.setName("token");
		formalparameter_removeToken_token.setEType(pack.getToken());

		EList<FormalParameter> parameters;
		
		eventtype_fire = ecno_factory.createEventType();
		eventtype_fire.setName("fire");
		eventtype_fire.setGui(true);
		addEventType(eventtype_fire);

		eventtype_remove = ecno_factory.createEventType();
		eventtype_remove.setName("remove");
		parameters = eventtype_remove.getParameters();
		parameters.add(formalparameter_remove_places);
		addEventType(eventtype_remove);

		eventtype_add = ecno_factory.createEventType();
		eventtype_add.setName("add");
		parameters = eventtype_add.getParameters();
		parameters.add(formalparameter_add_places);
		addEventType(eventtype_add);

		eventtype_removeToken = ecno_factory.createEventType();
		eventtype_removeToken.setName("removeToken");
		parameters = eventtype_removeToken.getParameters();
		parameters.add(formalparameter_removeToken_token);
		addEventType(eventtype_removeToken);



		elementtype_Transition = ecno_factory.createElementType();
		elementtype_Transition.setEClass(pack.getTransition());
		elementtype_Transition.setGui(true);
		addElementType(elementtype_Transition);

		elementtype_Arc = ecno_factory.createElementType();
		elementtype_Arc.setEClass(pack.getArc());
		addElementType(elementtype_Arc);

		elementtype_Place = ecno_factory.createElementType();
		elementtype_Place.setEClass(pack.getPlace());
		elementtype_Place.getParallelTriggerEvents().add(eventtype_add);
		elementtype_Place.getParallelTriggerEvents().add(eventtype_remove);
		elementtype_Place.getParallelTriggerEvents().add(eventtype_removeToken);
		addElementType(elementtype_Place);

		elementtype_Token = ecno_factory.createElementType();
		elementtype_Token.setEClass(pack.getToken());
		elementtype_Token.getParallelTriggerEvents().add(eventtype_removeToken);
		addElementType(elementtype_Token);



		EList<Reference> references;

		references = elementtype_Transition.getReferences();
		referencetype_Transition_out = ecno_factory.createReference();
		referencetype_Transition_out.setEReference(pack.getNode_Out());
		referencetype_Transition_out.setTarget(elementtype_Arc);
		references.add(referencetype_Transition_out);

		referencetype_Transition_in = ecno_factory.createReference();
		referencetype_Transition_in.setEReference(pack.getNode_In());
		referencetype_Transition_in.setTarget(elementtype_Arc);
		references.add(referencetype_Transition_in);

		references = elementtype_Arc.getReferences();
		referencetype_Arc_target = ecno_factory.createReference();
		referencetype_Arc_target.setEReference(pack.getArc_Target());
		referencetype_Arc_target.setTarget(elementtype_Place);
		references.add(referencetype_Arc_target);

		referencetype_Arc_source = ecno_factory.createReference();
		referencetype_Arc_source.setEReference(pack.getArc_Source());
		referencetype_Arc_source.setTarget(elementtype_Place);
		references.add(referencetype_Arc_source);

		references = elementtype_Place.getReferences();
		referencetype_Place_token = ecno_factory.createReference();
		referencetype_Place_token.setEReference(pack.getPlace_Token());
		referencetype_Place_token.setTarget(elementtype_Token);
		references.add(referencetype_Place_token);


		Synchronisation synch;
		CoordinationSet cset;

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_add);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Transition_out);
		synch.setEventType(eventtype_add);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Transition.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_remove);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Transition_in);
		synch.setEventType(eventtype_remove);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Transition.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_fire);
		elementtype_Transition.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_add);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Arc_target);
		synch.setEventType(eventtype_add);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Arc.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_remove);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Arc_source);
		synch.setEventType(eventtype_remove);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Arc.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_add);
		elementtype_Place.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_removeToken);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Place_token);
		synch.setEventType(eventtype_removeToken);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Place.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_remove);
		elementtype_Place.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_removeToken);
		elementtype_Token.getCoordinationSets().add(cset);

	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		if (type.equals(eventtype_remove)) {
			return dk.dtu.imm.se.ecno.example.petrinets.events.Remove.class;
		} else if (type.equals(eventtype_add)) {
			return dk.dtu.imm.se.ecno.example.petrinets.events.Add.class;
		} else if (type.equals(eventtype_removeToken)) {
			return dk.dtu.imm.se.ecno.example.petrinets.events.RemoveToken.class;
		} else {
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		{
			return null;
		}
	}

	public static PetrinetsModel getModel(ExecutionEngine engine) {
		return new PetrinetsModel(engine);
	}

}
