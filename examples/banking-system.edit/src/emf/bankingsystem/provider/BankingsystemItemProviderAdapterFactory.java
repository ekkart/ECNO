/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package emf.bankingsystem.provider;

import emf.bankingsystem.util.BankingsystemAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BankingsystemItemProviderAdapterFactory extends BankingsystemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BankingsystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.NaturalPerson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NaturalPersonItemProvider naturalPersonItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.NaturalPerson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNaturalPersonAdapter() {
		if (naturalPersonItemProvider == null) {
			naturalPersonItemProvider = new NaturalPersonItemProvider(this);
		}

		return naturalPersonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.PhysicalBankCard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalBankCardItemProvider physicalBankCardItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.PhysicalBankCard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalBankCardAdapter() {
		if (physicalBankCardItemProvider == null) {
			physicalBankCardItemProvider = new PhysicalBankCardItemProvider(this);
		}

		return physicalBankCardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.BankNote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BankNoteItemProvider bankNoteItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.BankNote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBankNoteAdapter() {
		if (bankNoteItemProvider == null) {
			bankNoteItemProvider = new BankNoteItemProvider(this);
		}

		return bankNoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.HW} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWItemProvider hwItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.HW}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWAdapter() {
		if (hwItemProvider == null) {
			hwItemProvider = new HWItemProvider(this);
		}

		return hwItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.ATMController} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ATMControllerItemProvider atmControllerItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.ATMController}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createATMControllerAdapter() {
		if (atmControllerItemProvider == null) {
			atmControllerItemProvider = new ATMControllerItemProvider(this);
		}

		return atmControllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.BankGateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BankGatewayItemProvider bankGatewayItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.BankGateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBankGatewayAdapter() {
		if (bankGatewayItemProvider == null) {
			bankGatewayItemProvider = new BankGatewayItemProvider(this);
		}

		return bankGatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.SwiftNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwiftNetworkItemProvider swiftNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.SwiftNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwiftNetworkAdapter() {
		if (swiftNetworkItemProvider == null) {
			swiftNetworkItemProvider = new SwiftNetworkItemProvider(this);
		}

		return swiftNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.AccountMngr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountMngrItemProvider accountMngrItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.AccountMngr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountMngrAdapter() {
		if (accountMngrItemProvider == null) {
			accountMngrItemProvider = new AccountMngrItemProvider(this);
		}

		return accountMngrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.Account} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccountItemProvider accountItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.Account}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccountAdapter() {
		if (accountItemProvider == null) {
			accountItemProvider = new AccountItemProvider(this);
		}

		return accountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.BankCard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BankCardItemProvider bankCardItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.BankCard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBankCardAdapter() {
		if (bankCardItemProvider == null) {
			bankCardItemProvider = new BankCardItemProvider(this);
		}

		return bankCardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.Customer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerItemProvider customerItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.Customer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerAdapter() {
		if (customerItemProvider == null) {
			customerItemProvider = new CustomerItemProvider(this);
		}

		return customerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.Session} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SessionItemProvider sessionItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.Session}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSessionAdapter() {
		if (sessionItemProvider == null) {
			sessionItemProvider = new SessionItemProvider(this);
		}

		return sessionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.Setting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettingItemProvider settingItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.Setting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettingAdapter() {
		if (settingItemProvider == null) {
			settingItemProvider = new SettingItemProvider(this);
		}

		return settingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link emf.bankingsystem.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link emf.bankingsystem.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (naturalPersonItemProvider != null) naturalPersonItemProvider.dispose();
		if (physicalBankCardItemProvider != null) physicalBankCardItemProvider.dispose();
		if (bankNoteItemProvider != null) bankNoteItemProvider.dispose();
		if (hwItemProvider != null) hwItemProvider.dispose();
		if (atmControllerItemProvider != null) atmControllerItemProvider.dispose();
		if (bankGatewayItemProvider != null) bankGatewayItemProvider.dispose();
		if (swiftNetworkItemProvider != null) swiftNetworkItemProvider.dispose();
		if (accountMngrItemProvider != null) accountMngrItemProvider.dispose();
		if (accountItemProvider != null) accountItemProvider.dispose();
		if (bankCardItemProvider != null) bankCardItemProvider.dispose();
		if (customerItemProvider != null) customerItemProvider.dispose();
		if (sessionItemProvider != null) sessionItemProvider.dispose();
		if (settingItemProvider != null) settingItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
	}

}
