/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
package ecno.bankingsystem.localbehaviour;

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.ecnonets.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.ecnonets.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine; 

@SuppressWarnings("unused")
public class ATMController extends AbstractPetrinetBehaviour<emf.bankingsystem.ATMController> {
	
	public ATMController(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (emf.bankingsystem.ATMController) element, new int[]{1, 0, 0, 0, 0}, new String[]{"t8", "t9", "t10", "t11", "t12", "t13", "t14", "t15", "t35", "t36", "t37", "t51"}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return marking.get(0) >= 1;
                    
		case 1:
			return marking.get(1) >= 1;
                    
		case 2:
			return marking.get(1) >= 1;
                    
		case 3:
			return marking.get(2) >= 1;
                    
		case 4:
			return marking.get(2) >= 1;
                    
		case 5:
			return marking.get(1) >= 1;
                    
		case 6:
			return marking.get(3) >= 1;
                    
		case 7:
			return marking.get(3) >= 1;
                    
		case 8:
			return marking.get(3) >= 1;
                    
		case 9:
			return marking.get(4) >= 1;
                    
		case 10:
			return marking.get(4) >= 1;
                    
		case 11:
			return marking.get(3) >= 1;
                    
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
		case 0:
            m[0]--;
            break;
                    
		case 1:
            m[1]--;
            break;
                    
		case 2:
            m[1]--;
            break;
                    
		case 3:
            m[2]--;
            break;
                    
		case 4:
            m[2]--;
            break;
                    
		case 5:
            m[1]--;
            break;
                    
		case 6:
            m[3]--;
            break;
                    
		case 7:
            m[3]--;
            break;
                    
		case 8:
            m[3]--;
            break;
                    
		case 9:
            m[4]--;
            break;
                    
		case 10:
            m[4]--;
            break;
                    
		case 11:
            m[3]--;
            break;
                    
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		case 1:
			return false;                    
		case 2:
			return false;                    
		case 3:
			return false;                    
		case 4:
			return false;                    
		case 5:
			return false;                    
		case 6:
			return false;                    
		case 7:
			return false;                    
		case 8:
			return false;                    
		case 9:
			return false;                    
		case 10:
			return false;                    
		case 11:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			marking.set(0, marking.get(0) - 1);
			marking.set(1,  marking.get(1) + 1);
			break;
			
		case 1:		
			marking.set(1, marking.get(1) - 1);
			marking.set(3,  marking.get(3) + 1);
			break;
			
		case 2:		
			marking.set(1, marking.get(1) - 1);
			marking.set(2,  marking.get(2) + 1);
			break;
			
		case 3:		
			marking.set(2, marking.get(2) - 1);
			marking.set(0,  marking.get(0) + 1);
			break;
			
		case 4:		
			marking.set(2, marking.get(2) - 1);
			marking.set(0,  marking.get(0) + 1);
			break;
			
		case 5:		
			marking.set(1, marking.get(1) - 1);
			marking.set(2,  marking.get(2) + 1);
			break;
			
		case 6:		
			marking.set(3, marking.get(3) - 1);
			marking.set(2,  marking.get(2) + 1);
			break;
			
		case 7:		
			marking.set(3, marking.get(3) - 1);
			marking.set(2,  marking.get(2) + 1);
			break;
			
		case 8:		
			marking.set(3, marking.get(3) - 1);
			marking.set(4,  marking.get(4) + 1);
			break;
			
		case 9:		
			marking.set(4, marking.get(4) - 1);
			marking.set(3,  marking.get(3) + 1);
			break;
			
		case 10:		
			marking.set(4, marking.get(4) - 1);
			marking.set(3,  marking.get(3) + 1);
			break;
			
		case 11:		
			marking.set(3, marking.get(3) - 1);
			marking.set(3,  marking.get(3) + 1);
			break;
						
		}
	}
	
	@Override
	public String[] getTransitionEventParameterNames(int transition, int event) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 1:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] { "card", "accountMgr" };
            default: return new String[] {};
                }
		case 2:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] {  };
            default: return new String[] {};
                }
		case 3:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 4:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] {  };
            default: return new String[] {};
                }
		case 5:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] {  };
            default: return new String[] {};
                }
		case 6:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] {  };
            default: return new String[] {};
                }
		case 7:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] { "session", "atm" };
			case 2:
				return new String[] {  };
            default: return new String[] {};
                }
		case 8:
			switch (event) {
			case 0:
				return new String[] { "session" };
			case 1:
				return new String[] { "amount" };
            default: return new String[] {};
                }
		case 9:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 10:
			switch (event) {
			case 0:
				return new String[] {  };
			case 1:
				return new String[] {  };
			case 2:
				return new String[] { "amount", "session" };
            default: return new String[] {};
                }
		case 11:
			switch (event) {
			case 0:
				return new String[] { "session" };
            default: return new String[] {};
                }
		default: return new String[] {};
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.ATMController self = self();
				
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i = 
			    (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 1: {
			ecno.bankingsystem.events.EnterPIN e = 
			    (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
			ecno.bankingsystem.events.CreateSession s = 
			    (ecno.bankingsystem.events.CreateSession) choice.getEventValues("createSession");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {      
				case 0: return self().getHw().getInserted();			      
				case 1: return s.card.getIssuer();			    
                default: return null;
                }
			default: return null;
			}
		}
		case 2: {
			ecno.bankingsystem.events.EnterPIN e = 
			    (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 3: {
			ecno.bankingsystem.events.UserCardAction r = 
			    (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 4: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 5: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 6: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 7: {
			ecno.bankingsystem.events.ExitSession s = 
			    (ecno.bankingsystem.events.ExitSession) choice.getEventValues("exitSession");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {      
				case 0: return self().getSession();			      
				case 1: return self();			    
                default: return null;
                }
			case 2:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 8: {
			ecno.bankingsystem.events.Withdraw w = 
			    (ecno.bankingsystem.events.Withdraw) choice.getEventValues("withdraw");
			ecno.bankingsystem.events.PresentMoney p = 
			    (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
			switch (event) {
			case 0:
				switch (param) {      
				case 0: return self().getSession();			    
                default: return null;
                }
			case 1:
				switch (param) {      
				case 0: return w.amount;			    
                default: return null;
                }
			default: return null;
			}
		}
		case 9: {
			ecno.bankingsystem.events.TakeMoney t = 
			    (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 10: {
			ecno.bankingsystem.events.RetractMoney r = 
			    (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
			ecno.bankingsystem.events.CancelWithdraw c = 
			    (ecno.bankingsystem.events.CancelWithdraw) choice.getEventValues("cancelWithdraw");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			case 1:
				switch (param) {    
                default: return null;
                }
			case 2:
				switch (param) {      
				case 0: return r.amount;			      
				case 1: return self().getSession();			    
                default: return null;
                }
			default: return null;
			}
		}
		case 11: {
			ecno.bankingsystem.events.Balance b = 
			    (ecno.bankingsystem.events.Balance) choice.getEventValues("balance");
			switch (event) {
			case 0:
				switch (param) {      
				case 0: return self().getSession();			    
                default: return null;
                }
			default: return null;
			}
		}
		default: return null;
		}  
	}	

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.ATMController self = self();
		
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i = 
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
			return i.card != null; 
		}
		case 1: {
			ecno.bankingsystem.events.EnterPIN e = 
                (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
			ecno.bankingsystem.events.CreateSession s = 
                (ecno.bankingsystem.events.CreateSession) choice.getEventValues("createSession");
			return e.pin == self().getHw().getInserted().getPin() && s.session != null; 
		}
		case 2: {
			ecno.bankingsystem.events.EnterPIN e = 
                (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
			return e.pin != self().getHw().getInserted().getPin(); 
		}
		case 3: {
			ecno.bankingsystem.events.UserCardAction r = 
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
			return true; 
		}
		case 4: {
			return true; 
		}
		case 5: {
			return true; 
		}
		case 6: {
			return true; 
		}
		case 7: {
			ecno.bankingsystem.events.ExitSession s = 
                (ecno.bankingsystem.events.ExitSession) choice.getEventValues("exitSession");
			return true; 
		}
		case 8: {
			ecno.bankingsystem.events.Withdraw w = 
                (ecno.bankingsystem.events.Withdraw) choice.getEventValues("withdraw");
			ecno.bankingsystem.events.PresentMoney p = 
                (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
			return true; 
		}
		case 9: {
			ecno.bankingsystem.events.TakeMoney t = 
                (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
			return true; 
		}
		case 10: {
			ecno.bankingsystem.events.RetractMoney r = 
                (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
			ecno.bankingsystem.events.CancelWithdraw c = 
                (ecno.bankingsystem.events.CancelWithdraw) choice.getEventValues("cancelWithdraw");
			return true; 
		}
		case 11: {
			ecno.bankingsystem.events.Balance b = 
                (ecno.bankingsystem.events.Balance) choice.getEventValues("balance");
			return true; 
		}
		default: return false;
		}  
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.ATMController self = self();
		
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i =
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 1: {
			ecno.bankingsystem.events.EnterPIN e =
                (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
			ecno.bankingsystem.events.CreateSession s =
                (ecno.bankingsystem.events.CreateSession) choice.getEventValues("createSession");
{
self().setSession(s.session);
}
            fire(transition);
			return; 
		}
		case 2: {
			ecno.bankingsystem.events.EnterPIN e =
                (ecno.bankingsystem.events.EnterPIN) choice.getEventValues("enterPIN");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 3: {
			ecno.bankingsystem.events.UserCardAction r =
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 4: {
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 5: {
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 6: {
{
self().setSession(null);
}
            fire(transition);
			return; 
		}
		case 7: {
			ecno.bankingsystem.events.ExitSession s =
                (ecno.bankingsystem.events.ExitSession) choice.getEventValues("exitSession");
{
self().setSession(null);
}
            fire(transition);
			return; 
		}
		case 8: {
			ecno.bankingsystem.events.Withdraw w =
                (ecno.bankingsystem.events.Withdraw) choice.getEventValues("withdraw");
			ecno.bankingsystem.events.PresentMoney p =
                (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 9: {
			ecno.bankingsystem.events.TakeMoney t =
                (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 10: {
			ecno.bankingsystem.events.RetractMoney r =
                (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
			ecno.bankingsystem.events.CancelWithdraw c =
                (ecno.bankingsystem.events.CancelWithdraw) choice.getEventValues("cancelWithdraw");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 11: {
			ecno.bankingsystem.events.Balance b =
                (ecno.bankingsystem.events.Balance) choice.getEventValues("balance");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		default: return;
		}  
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "insertCard" };
		case 1: 
			return new String[] { "enterPIN", "createSession" };
		case 2: 
			return new String[] { "enterPIN", "presentCard" };
		case 3: 
			return new String[] { "takeCard" };
		case 4: 
			return new String[] { "timeout", "keepCard" };
		case 5: 
			return new String[] { "timeout", "presentCard" };
		case 6: 
			return new String[] { "timeout", "presentCard" };
		case 7: 
			return new String[] { "exit", "exitSession", "presentCard" };
		case 8: 
			return new String[] { "withdraw", "presentMoney" };
		case 9: 
			return new String[] { "takeMoney" };
		case 10: 
			return new String[] { "timeout", "retractMoney", "cancelWithdraw" };
		case 11: 
			return new String[] { "balance" };
		default: return null;
		}  
	}
		
}

