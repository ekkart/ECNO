/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
package ecno.bankingsystem.localbehaviour;

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.ecnonets.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.ecnonets.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;

import emf.bankingsystem.BankNote; 

@SuppressWarnings("unused")
public class HW extends AbstractPetrinetBehaviour<emf.bankingsystem.HW> {
	
	public HW(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (emf.bankingsystem.HW) element, new int[]{}, new String[]{"t1", "t3", "t4", "t5", "t6", "t7", "t31", "t32", "t33", "t34"}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return true;
                    
		case 1:
			return true;
                    
		case 2:
			return true;
                    
		case 3:
			return true;
                    
		case 4:
			return true;
                    
		case 5:
			return true;
                    
		case 6:
			return true;
                    
		case 7:
			return true;
                    
		case 8:
			return true;
                    
		case 9:
			return true;
                    
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
		case 0:
            break;
                    
		case 1:
            break;
                    
		case 2:
            break;
                    
		case 3:
            break;
                    
		case 4:
            break;
                    
		case 5:
            break;
                    
		case 6:
            break;
                    
		case 7:
            break;
                    
		case 8:
            break;
                    
		case 9:
            break;
                    
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		case 1:
			return false;                    
		case 2:
			return false;                    
		case 3:
			return false;                    
		case 4:
			return false;                    
		case 5:
			return false;                    
		case 6:
			return false;                    
		case 7:
			return false;                    
		case 8:
			return false;                    
		case 9:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			break;
			
		case 1:		
			break;
			
		case 2:		
			break;
			
		case 3:		
			break;
			
		case 4:		
			break;
			
		case 5:		
			break;
			
		case 6:		
			break;
			
		case 7:		
			break;
			
		case 8:		
			break;
			
		case 9:		
			break;
						
		}
	}
	
	@Override
	public String[] getTransitionEventParameterNames(int transition, int event) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 1:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 2:
			switch (event) {
			case 0:
				return new String[] { "card" };
            default: return new String[] {};
                }
		case 3:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 4:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 5:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 6:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 7:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 8:
			switch (event) {
			case 0:
				return new String[] {  };
            default: return new String[] {};
                }
		case 9:
			switch (event) {
			case 0:
				return new String[] { "amount" };
            default: return new String[] {};
                }
		default: return new String[] {};
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.HW self = self();
				
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i = 
			    (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 1: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 2: {
			ecno.bankingsystem.events.UserCardAction r = 
			    (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
			switch (event) {
			case 0:
				switch (param) {      
				case 0: return self().getShow();			    
                default: return null;
                }
			default: return null;
			}
		}
		case 3: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 4: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 5: {
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 6: {
			ecno.bankingsystem.events.UserMainAction u = 
			    (ecno.bankingsystem.events.UserMainAction) choice.getEventValues("userMainAction");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 7: {
			ecno.bankingsystem.events.TakeMoney t = 
			    (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 8: {
			ecno.bankingsystem.events.PresentMoney p = 
			    (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 9: {
			ecno.bankingsystem.events.RetractMoney r = 
			    (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
			switch (event) {
			case 0:
				switch (param) {      
				case 0: return self().getReady().size();			    
                default: return null;
                }
			default: return null;
			}
		}
		default: return null;
		}  
	}	

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.HW self = self();
		
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i = 
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
			return i.card != null; 
		}
		case 1: {
			return true; 
		}
		case 2: {
			ecno.bankingsystem.events.UserCardAction r = 
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
			return true; 
		}
		case 3: {
			return true; 
		}
		case 4: {
			return true; 
		}
		case 5: {
			return true; 
		}
		case 6: {
			ecno.bankingsystem.events.UserMainAction u = 
                (ecno.bankingsystem.events.UserMainAction) choice.getEventValues("userMainAction");
			return true; 
		}
		case 7: {
			ecno.bankingsystem.events.TakeMoney t = 
                (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
			return true; 
		}
		case 8: {
			ecno.bankingsystem.events.PresentMoney p = 
                (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
			return self().getNotes().size() >= p.amount; 
		}
		case 9: {
			ecno.bankingsystem.events.RetractMoney r = 
                (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
			return true; 
		}
		default: return false;
		}  
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		emf.bankingsystem.HW self = self();
		
		switch (transition) {
		case 0: {
			ecno.bankingsystem.events.UserCardAction i =
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("insertCard");
{
self().setInserted(i.card);
}
            fire(transition);
			return; 
		}
		case 1: {
{
self().setShow(self().getInserted());
}
            fire(transition);
			return; 
		}
		case 2: {
			ecno.bankingsystem.events.UserCardAction r =
                (ecno.bankingsystem.events.UserCardAction) choice.getEventValues("takeCard");
{
self().setShow(null);
}
            fire(transition);
			return; 
		}
		case 3: {
{
self().getHeld().add(self().getShow());
}
            fire(transition);
			return; 
		}
		case 4: {
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 5: {
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 6: {
			ecno.bankingsystem.events.UserMainAction u =
                (ecno.bankingsystem.events.UserMainAction) choice.getEventValues("userMainAction");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 7: {
			ecno.bankingsystem.events.TakeMoney t =
                (ecno.bankingsystem.events.TakeMoney) choice.getEventValues("takeMoney");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 8: {
			ecno.bankingsystem.events.PresentMoney p =
                (ecno.bankingsystem.events.PresentMoney) choice.getEventValues("presentMoney");
{
for (int i=0; i < p.amount; i++) {
  BankNote note = self().getNotes().remove(0);
  self().getReady().add(note);
}
}
            fire(transition);
			return; 
		}
		case 9: {
			ecno.bankingsystem.events.RetractMoney r =
                (ecno.bankingsystem.events.RetractMoney) choice.getEventValues("retractMoney");
{
self().getNotes().addAll(self().getReady());
}
            fire(transition);
			return; 
		}
		default: return;
		}  
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "insertCard" };
		case 1: 
			return new String[] { "presentCard" };
		case 2: 
			return new String[] { "takeCard" };
		case 3: 
			return new String[] { "keepCard" };
		case 4: 
			return new String[] { "userAuxAction" };
		case 5: 
			return new String[] { "timeout" };
		case 6: 
			return new String[] { "userMainAction" };
		case 7: 
			return new String[] { "takeMoney" };
		case 8: 
			return new String[] { "presentMoney" };
		case 9: 
			return new String[] { "retractMoney" };
		default: return null;
		}  
	}
		
}

