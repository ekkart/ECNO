/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package dk.dtu.compute.se.ecno.processalgebras.globalbehaviour;

import org.eclipse.emf.common.util.EList;

import dk.dtu.compute.se.emf.processalgebra.ProcessalgebraPackage;
import dk.dtu.compute.se.ecno.processalgebras.localbehaviour.ProcessAlgebraBehaviourFactory;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class ProcessAlgebraCoordinationModel extends EMFPackageAdapter {

	private FormalParameter formalparameter_action_action;
	private FormalParameter formalparameter_action_pos;
	private FormalParameter formalparameter_action_neg;
	private FormalParameter formalparameter_action_processes;
	private FormalParameter formalparameter_action_terminating;

	private EventType eventtype_action;
	private EventType eventtype_init;
	private EventType eventtype_lock;


	private ElementType elementtype_ProcessDefinitions;
	private ElementType elementtype_Action;
	private ElementType elementtype_ActionDef;
	private ElementType elementtype_ProcessInstance;
	private ElementType elementtype_SequenceInst;
	private ElementType elementtype_ChoiceInst;
	private ElementType elementtype_ParallelInst;
	private ElementType elementtype_HideInst;
	private ElementType elementtype_ActionInst;
	private ElementType elementtype_ProcessDefinition;

	private Reference referencetype_ProcessDefinitions_actions;
	private Reference referencetype_Action_instances;
	private Reference referencetype_ActionDef_uses;
	private Reference referencetype_ActionDef_procdefs;
	private Reference referencetype_ProcessInstance_parent;
	private Reference referencetype_ProcessDefinition_owner;


	private ProcessAlgebraCoordinationModel(ExecutionEngine engine) {
		super (new ProcessAlgebraBehaviourFactory(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		ProcessalgebraPackage pack = ProcessalgebraPackage.eINSTANCE;

		getNamespace().setEPackage(pack);
		getNamespace().setUri("http://se.compute.dtu.dk/processalgebras/ecno");

		formalparameter_action_action = ecno_factory.createFormalParameter();
		formalparameter_action_action.setName("action");
		formalparameter_action_action.setEType(pack.getActionDef());
		formalparameter_action_pos = ecno_factory.createFormalParameter();
		formalparameter_action_pos.setName("pos");
		formalparameter_action_pos.setEType(pack.getProcessInstance());
		formalparameter_action_neg = ecno_factory.createFormalParameter();
		formalparameter_action_neg.setName("neg");
		formalparameter_action_neg.setEType(pack.getProcessInstance());
		formalparameter_action_processes = ecno_factory.createFormalParameter();
		formalparameter_action_processes.setName("processes");
		formalparameter_action_processes.setEType(pack.getProcessInstance());
		formalparameter_action_processes.setCollective(true);
		formalparameter_action_terminating = ecno_factory.createFormalParameter();
		formalparameter_action_terminating.setName("terminating");
		formalparameter_action_terminating.setEType(pack.getProcessInstance());
		formalparameter_action_terminating.setCollective(true);

		EList<FormalParameter> parameters;
		
		eventtype_action = ecno_factory.createEventType();
		eventtype_action.setName("action");
		eventtype_action.setGui(true);
		parameters = eventtype_action.getParameters();
		parameters.add(formalparameter_action_action);
		parameters.add(formalparameter_action_pos);
		parameters.add(formalparameter_action_neg);
		parameters.add(formalparameter_action_processes);
		parameters.add(formalparameter_action_terminating);
		addEventType(eventtype_action);

		eventtype_init = ecno_factory.createEventType();
		eventtype_init.setName("init");
		eventtype_init.setGui(true);
		addEventType(eventtype_init);

		eventtype_lock = ecno_factory.createEventType();
		eventtype_lock.setName("lock");
		addEventType(eventtype_lock);



		elementtype_ProcessDefinitions = ecno_factory.createElementType();
		elementtype_ProcessDefinitions.setEClass(pack.getProcessDefinitions());
		addElementType(elementtype_ProcessDefinitions);

		elementtype_Action = ecno_factory.createElementType();
		elementtype_Action.setEClass(pack.getAction());
		addElementType(elementtype_Action);

		elementtype_ActionDef = ecno_factory.createElementType();
		elementtype_ActionDef.setEClass(pack.getActionDef());
		elementtype_ActionDef.setGui(true);
		addElementType(elementtype_ActionDef);

		elementtype_ProcessInstance = ecno_factory.createElementType();
		elementtype_ProcessInstance.setEClass(pack.getProcessInstance());
		addElementType(elementtype_ProcessInstance);

		elementtype_SequenceInst = ecno_factory.createElementType();
		elementtype_SequenceInst.setEClass(pack.getSequenceInst());
		addElementType(elementtype_SequenceInst);

		elementtype_ChoiceInst = ecno_factory.createElementType();
		elementtype_ChoiceInst.setEClass(pack.getChoiceInst());
		addElementType(elementtype_ChoiceInst);

		elementtype_ParallelInst = ecno_factory.createElementType();
		elementtype_ParallelInst.setEClass(pack.getParallelInst());
		addElementType(elementtype_ParallelInst);

		elementtype_HideInst = ecno_factory.createElementType();
		elementtype_HideInst.setEClass(pack.getHideInst());
		addElementType(elementtype_HideInst);

		elementtype_ActionInst = ecno_factory.createElementType();
		elementtype_ActionInst.setEClass(pack.getActionInst());
		addElementType(elementtype_ActionInst);

		elementtype_ProcessDefinition = ecno_factory.createElementType();
		elementtype_ProcessDefinition.setEClass(pack.getProcessDefinition());
		elementtype_ProcessDefinition.setGui(true);
		addElementType(elementtype_ProcessDefinition);


		elementtype_SequenceInst.setSuper(elementtype_ProcessInstance);
		elementtype_ChoiceInst.setSuper(elementtype_ProcessInstance);
		elementtype_ParallelInst.setSuper(elementtype_ProcessInstance);
		elementtype_HideInst.setSuper(elementtype_ProcessInstance);
		elementtype_ActionInst.setSuper(elementtype_ProcessInstance);

		EList<Reference> references;

		references = elementtype_ProcessDefinitions.getReferences();
		referencetype_ProcessDefinitions_actions = ecno_factory.createReference();
		referencetype_ProcessDefinitions_actions.setEReference(pack.getProcessDefinitions_Actions());
		referencetype_ProcessDefinitions_actions.setTarget(elementtype_ActionDef);
		references.add(referencetype_ProcessDefinitions_actions);

		references = elementtype_Action.getReferences();
		referencetype_Action_instances = ecno_factory.createReference();
		referencetype_Action_instances.setEReference(pack.getAction_Instances());
		referencetype_Action_instances.setTarget(elementtype_ActionInst);
		references.add(referencetype_Action_instances);

		references = elementtype_ActionDef.getReferences();
		referencetype_ActionDef_uses = ecno_factory.createReference();
		referencetype_ActionDef_uses.setEReference(pack.getActionDef_Uses());
		referencetype_ActionDef_uses.setTarget(elementtype_Action);
		references.add(referencetype_ActionDef_uses);

		referencetype_ActionDef_procdefs = ecno_factory.createReference();
		referencetype_ActionDef_procdefs.setEReference(pack.getActionDef_Procdefs());
		referencetype_ActionDef_procdefs.setTarget(elementtype_ProcessDefinitions);
		references.add(referencetype_ActionDef_procdefs);

		references = elementtype_ProcessInstance.getReferences();
		referencetype_ProcessInstance_parent = ecno_factory.createReference();
		referencetype_ProcessInstance_parent.setEReference(pack.getProcessInstance_Parent());
		referencetype_ProcessInstance_parent.setTarget(elementtype_ProcessInstance);
		references.add(referencetype_ProcessInstance_parent);

		references = elementtype_ProcessDefinition.getReferences();
		referencetype_ProcessDefinition_owner = ecno_factory.createReference();
		referencetype_ProcessDefinition_owner.setEReference(pack.getProcessDefinition_Owner());
		referencetype_ProcessDefinition_owner.setTarget(elementtype_ProcessDefinitions);
		references.add(referencetype_ProcessDefinition_owner);


		Synchronisation synch;
		CoordinationSet cset;

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_action);
		elementtype_ProcessDefinitions.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_lock);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ProcessDefinitions_actions);
		synch.setEventType(eventtype_lock);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_ProcessDefinitions.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_init);
		elementtype_ProcessDefinitions.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_lock);
		elementtype_Action.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_action);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Action_instances);
		synch.setEventType(eventtype_action);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Action.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_action);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ActionDef_procdefs);
		synch.setEventType(eventtype_action);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ActionDef_uses);
		synch.setEventType(eventtype_action);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ActionDef_uses);
		synch.setEventType(eventtype_action);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_ActionDef.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_lock);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ActionDef_uses);
		synch.setEventType(eventtype_lock);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_ActionDef.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_action);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ProcessInstance_parent);
		synch.setEventType(eventtype_action);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_ProcessInstance.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_init);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_ProcessDefinition_owner);
		synch.setEventType(eventtype_init);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_ProcessDefinition.getCoordinationSets().add(cset);

	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		if (type.equals(eventtype_action)) {
			return dk.dtu.compute.se.ecno.processalgebras.events.Action.class;
		} else {
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		{
			return null;
		}
	}

	public static ProcessAlgebraCoordinationModel getModel(ExecutionEngine engine) {
		return new ProcessAlgebraCoordinationModel(engine);
	}

}
