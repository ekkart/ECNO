/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines an ECNO Instance which can
 * be started via the main method (Run As -> Java Application).
 */
package dk.dtu.compute.se.ecno.processalgebras.instances.example;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.gui.ECNOGUI;

public class ProcessDefinitionExample {

    final private dk.dtu.compute.se.emf.processalgebra.ProcessalgebraFactory factory1;

	public ProcessDefinitionExample() {
		factory1 = dk.dtu.compute.se.emf.processalgebra.ProcessalgebraFactory.eINSTANCE;
	}

	private void createInstance(ExecutionEngine engine) {
		// Create the objects
        dk.dtu.compute.se.emf.processalgebra.ProcessDefinitions o1 = factory1.createProcessDefinitions();
        dk.dtu.compute.se.emf.processalgebra.ProcessDefinition o2 = factory1.createProcessDefinition();
        dk.dtu.compute.se.emf.processalgebra.ProcessName o3 = factory1.createProcessName();
        dk.dtu.compute.se.emf.processalgebra.ProcessDefinition o4 = factory1.createProcessDefinition();
        dk.dtu.compute.se.emf.processalgebra.Sequence o5 = factory1.createSequence();
        dk.dtu.compute.se.emf.processalgebra.Action o6 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Action o7 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.ProcessName o8 = factory1.createProcessName();
        dk.dtu.compute.se.emf.processalgebra.ProcessDefinition o9 = factory1.createProcessDefinition();
        dk.dtu.compute.se.emf.processalgebra.Parallel o10 = factory1.createParallel();
        dk.dtu.compute.se.emf.processalgebra.Sequence o11 = factory1.createSequence();
        dk.dtu.compute.se.emf.processalgebra.Choice o12 = factory1.createChoice();
        dk.dtu.compute.se.emf.processalgebra.Hide o13 = factory1.createHide();
        dk.dtu.compute.se.emf.processalgebra.Parallel o14 = factory1.createParallel();
        dk.dtu.compute.se.emf.processalgebra.Sequence o15 = factory1.createSequence();
        dk.dtu.compute.se.emf.processalgebra.Action o16 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Action o17 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Action o18 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Sequence o19 = factory1.createSequence();
        dk.dtu.compute.se.emf.processalgebra.Action o20 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Action o21 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.ProcessName o22 = factory1.createProcessName();
        dk.dtu.compute.se.emf.processalgebra.Action o23 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.Action o24 = factory1.createAction();
        dk.dtu.compute.se.emf.processalgebra.ActionDef o25 = factory1.createActionDef();
        dk.dtu.compute.se.emf.processalgebra.ActionDef o26 = factory1.createActionDef();
        dk.dtu.compute.se.emf.processalgebra.ActionDef o27 = factory1.createActionDef();
        dk.dtu.compute.se.emf.processalgebra.ActionDef o28 = factory1.createActionDef();	

		// Set the (simple) attributes
        o2.setName("init");
        o4.setName("X");
        o6.setBar(false);
        o7.setBar(false);
        o9.setName("Y");
        o16.setBar(false);
        o17.setBar(false);
        o18.setBar(true);
        o20.setBar(false);
        o21.setBar(false);
        o23.setBar(true);
        o24.setBar(true);
        o25.setName("a");
        o26.setName("b");
        o27.setName("c");
        o28.setName("d");	
   
		// Create the single references
        o2.setOwner(o1);
        o2.setProcess(o3);
        o3.setDefinition(o9);
        o4.setOwner(o1);
        o4.setProcess(o5);
        o6.setAction(o25);
        o7.setAction(o26);
        o8.setDefinition(o4);
        o9.setOwner(o1);
        o9.setProcess(o10);
        o13.setProcess(o14);
        o16.setAction(o25);
        o17.setAction(o26);
        o18.setAction(o25);
        o20.setAction(o27);
        o21.setAction(o28);
        o22.setDefinition(o9);
        o23.setAction(o25);
        o24.setAction(o26);
        o25.setProcdefs(o1);
        o26.setProcdefs(o1);
        o27.setProcdefs(o1);
        o28.setProcdefs(o1);	

		// Create the multi references
        o5.getSubprocess().add(o6);
        o5.getSubprocess().add(o7);
        o5.getSubprocess().add(o8);
        o10.getSubprocess().add(o11);
        o10.getSubprocess().add(o23);
        o10.getSubprocess().add(o24);
        o11.getSubprocess().add(o12);
        o11.getSubprocess().add(o22);
        o12.getSubprocess().add(o13);
        o12.getSubprocess().add(o19);
        o13.getActions().add(o25);
        o14.getSubprocess().add(o15);
        o14.getSubprocess().add(o18);
        o15.getSubprocess().add(o16);
        o15.getSubprocess().add(o17);
        o19.getSubprocess().add(o20);
        o19.getSubprocess().add(o21);	
   		
		// Register the GUI objects with the controllers (objects 
		// not visible at a GUI will be added to the engine on the fly)
        engine.addElement(o2);
        engine.addElement(o4);
        engine.addElement(o9);
        engine.addElement(o25);
        engine.addElement(o26);
        engine.addElement(o27);
        engine.addElement(o28);
	}

    public static void main(String[] args) {
    	ExecutionEngine engine = ExecutionEngine.createNewInstance();
    	engine.addPackageAdapter(dk.dtu.compute.se.ecno.processalgebras.globalbehaviour.ProcessAlgebraCoordinationModel.getModel(engine));
    	if (!engine.resolveNamespaceImports()) {
    		System.err.println("Package imports could not be resolved");
    	}
    	new ECNOGUI(engine);
    	ProcessDefinitionExample instance = new ProcessDefinitionExample();
    	instance.createInstance(engine);
    }

}
