/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
package dk.dtu.compute.se.ecno.processalgebras.localbehaviour;

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.ecnonets.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.ecnonets.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;

import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

import dk.dtu.compute.se.emf.processalgebra.ProcessInstance; 

@SuppressWarnings("unused")
public class ChoiceInst extends AbstractPetrinetBehaviour<dk.dtu.compute.se.emf.processalgebra.ChoiceInst> {


private static boolean choiceCond(Collection<ProcessInstance> processes, List<ProcessInstance> subprocesses) {
	int count = 0;
	for (ProcessInstance subprocess: subprocesses)  {
		if (processes.contains(subprocess)) {
			count++;
			if (count > 1) {
				return false;
			}
		}
	}
	return true;
}

private static ProcessInstance terminating(ProcessInstance self,
        Collection<ProcessInstance> processes,
        Collection<ProcessInstance> terminating) {
    for (ProcessInstance child: self.getChild()) {
        if (processes.contains(child) && terminating.contains(child)) {
            return self;
        }
    }
    return null;
}
	
	public ChoiceInst(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (dk.dtu.compute.se.emf.processalgebra.ChoiceInst) element, new int[]{}, new String[]{"t0"}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return true;
                    
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
		case 0:
            break;
                    
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			break;
						
		}
	}
	
	@Override
	public String[] getTransitionEventParameterNames(int transition, int event) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				return new String[] { "terminating" };
            default: return new String[] {};
                }
		default: return new String[] {};
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		dk.dtu.compute.se.emf.processalgebra.ChoiceInst self = self();
				
		switch (transition) {
		case 0: {
			dk.dtu.compute.se.ecno.processalgebras.events.Action a = 
			    (dk.dtu.compute.se.ecno.processalgebras.events.Action) choice.getEventValues("action");
			switch (event) {
			case 0:
				switch (param) {      
				case 0: return terminating(self(),a.processes,a.terminating);			    
                default: return null;
                }
			default: return null;
			}
		}
		default: return null;
		}  
	}	

	@Override
	public boolean checkAssignmentCompleteness(int t, int e, int p) {
		switch (t) {
		case 0:
			switch (e) {
			case 0:
				switch (p) {
				case 0:
					return false;
				default:
					return true;
				} 			
			default:
				return true;
			} 
		default:
			return true;
		}
	}

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		dk.dtu.compute.se.emf.processalgebra.ChoiceInst self = self();
		
		switch (transition) {
		case 0: {
			dk.dtu.compute.se.ecno.processalgebras.events.Action a = 
                (dk.dtu.compute.se.ecno.processalgebras.events.Action) choice.getEventValues("action");
			return choiceCond(a.processes,self().getChild()); 
		}
		default: return false;
		}  
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		dk.dtu.compute.se.emf.processalgebra.ChoiceInst self = self();
		
		switch (transition) {
		case 0: {
			dk.dtu.compute.se.ecno.processalgebras.events.Action a =
                (dk.dtu.compute.se.ecno.processalgebras.events.Action) choice.getEventValues("action");
{
// dispose of all other alternatives
List<ProcessInstance> children = new ArrayList<ProcessInstance>(self().getChild());
children.removeAll(a.processes);
for (ProcessInstance child: children) {
    child.dispose();
    self().getChild().remove(child);
}

self().getChild().removeAll(a.terminating);
}
            fire(transition);
			return; 
		}
		default: return;
		}  
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "action" };
		default: return null;
		}  
	}
		
}

