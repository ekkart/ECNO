/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package dk.dtu.imm.se.ecno.examples.workers.coordination;

import org.eclipse.emf.common.util.EList;

import dk.dtu.imm.se.ecno.examples.workers.WorkersPackage;
import dk.dtu.imm.se.ecno.examples.workers.automata.WorkersAutomata;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class WorkersModel extends EMFPackageAdapter {

	private FormalParameter formalparameter_doJob_job;
	private FormalParameter formalparameter_doJob_workers;
	private FormalParameter formalparameter_doJob_newName;

	private EventType eventtype_arrive;
	private EventType eventtype_depart;
	private EventType eventtype_doJob;
	private EventType eventtype_cancelJob;


	private ElementType elementtype_Worker;
	private ElementType elementtype_Job;
	private ElementType elementtype_Car;

	private Reference referencetype_Worker_car;
	private Reference referencetype_Worker_assigned;
	private Reference referencetype_Job_needed;
	private Reference referencetype_Car_passenger;


	private WorkersModel(ExecutionEngine engine) {
		super (new WorkersAutomata(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		WorkersPackage pack = WorkersPackage.eINSTANCE;

		getNamespace().setEPackage(pack);
		getNamespace().setUri("dk.dtu.imm.se.ecno.example.workers.collective");

		formalparameter_doJob_job = ecno_factory.createFormalParameter();
		formalparameter_doJob_job.setName("job");
		formalparameter_doJob_job.setEType(pack.getJob());
		formalparameter_doJob_workers = ecno_factory.createFormalParameter();
		formalparameter_doJob_workers.setName("workers");
		formalparameter_doJob_workers.setEType(pack.getWorker());
		formalparameter_doJob_workers.setCollective(true);
		formalparameter_doJob_newName = ecno_factory.createFormalParameter();
		formalparameter_doJob_newName.setName("newName");
		formalparameter_doJob_newName.setEType(org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEString());

		EList<FormalParameter> parameters;
		
		eventtype_arrive = ecno_factory.createEventType();
		eventtype_arrive.setName("arrive");
		eventtype_arrive.setGui(true);
		addEventType(eventtype_arrive);

		eventtype_depart = ecno_factory.createEventType();
		eventtype_depart.setName("depart");
		eventtype_depart.setGui(true);
		addEventType(eventtype_depart);

		eventtype_doJob = ecno_factory.createEventType();
		eventtype_doJob.setName("doJob");
		parameters = eventtype_doJob.getParameters();
		parameters.add(formalparameter_doJob_job);
		parameters.add(formalparameter_doJob_workers);
		parameters.add(formalparameter_doJob_newName);
		addEventType(eventtype_doJob);

		eventtype_cancelJob = ecno_factory.createEventType();
		eventtype_cancelJob.setName("cancelJob");
		eventtype_cancelJob.setGui(true);
		addEventType(eventtype_cancelJob);



		elementtype_Worker = ecno_factory.createElementType();
		elementtype_Worker.setEClass(pack.getWorker());
		elementtype_Worker.setGui(true);
		addElementType(elementtype_Worker);

		elementtype_Job = ecno_factory.createElementType();
		elementtype_Job.setEClass(pack.getJob());
		elementtype_Job.setGui(true);
		addElementType(elementtype_Job);

		elementtype_Car = ecno_factory.createElementType();
		elementtype_Car.setEClass(pack.getCar());
		elementtype_Car.setGui(true);
		addElementType(elementtype_Car);



		EList<Reference> references;

		references = elementtype_Worker.getReferences();
		referencetype_Worker_car = ecno_factory.createReference();
		referencetype_Worker_car.setEReference(pack.getWorker_Car());
		referencetype_Worker_car.setTarget(elementtype_Car);
		references.add(referencetype_Worker_car);

		referencetype_Worker_assigned = ecno_factory.createReference();
		referencetype_Worker_assigned.setEReference(pack.getWorker_Assigned());
		referencetype_Worker_assigned.setTarget(elementtype_Job);
		references.add(referencetype_Worker_assigned);

		references = elementtype_Job.getReferences();
		referencetype_Job_needed = ecno_factory.createReference();
		referencetype_Job_needed.setEReference(pack.getJob_Needed());
		referencetype_Job_needed.setTarget(elementtype_Worker);
		references.add(referencetype_Job_needed);

		references = elementtype_Car.getReferences();
		referencetype_Car_passenger = ecno_factory.createReference();
		referencetype_Car_passenger.setEReference(pack.getCar_Passenger());
		referencetype_Car_passenger.setTarget(elementtype_Worker);
		references.add(referencetype_Car_passenger);


		Synchronisation synch;
		CoordinationSet cset;

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_arrive);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Worker_car);
		synch.setEventType(eventtype_arrive);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Worker.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_depart);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Worker_car);
		synch.setEventType(eventtype_depart);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Worker.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_doJob);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Worker_assigned);
		synch.setEventType(eventtype_doJob);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Worker.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_doJob);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Job_needed);
		synch.setEventType(eventtype_doJob);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Job.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_cancelJob);
		elementtype_Job.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_arrive);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Car_passenger);
		synch.setEventType(eventtype_arrive);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Car.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_depart);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Car_passenger);
		synch.setEventType(eventtype_depart);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Car.getCoordinationSets().add(cset);

	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		if (type.equals(eventtype_doJob)) {
			return dk.dtu.imm.se.ecno.examples.workers.events.DoJob.class;
		} else {
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		{
			return null;
		}
	}

	public static WorkersModel getModel(ExecutionEngine engine) {
		return new WorkersModel(engine);
	}

}
