/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package example.ecno.vendingmachine.coordination;

import org.eclipse.emf.common.util.EList;

import example.emf.vendingmachine.VendingmachinePackage;
import example.ecno.vendingmachine.automata.VendingMachineBehaviour;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.EventTypeExtension;
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class VendingMachineModel extends EMFPackageAdapter {

	private FormalParameter formalparameter_insert_coin;
	private FormalParameter formalparameter_insert_slot;
	private FormalParameter formalparameter_pass_coin;
	private FormalParameter formalparameter_pass_slot;
	private FormalParameter formalparameter_return__slot;
	private FormalParameter formalparameter_drink_brewer;
	private FormalParameter formalparameter_yyy_test;

	private EventType eventtype_insert;
	private EventType eventtype_pass;
	private EventType eventtype_return_;
	private EventType eventtype_reset;
	private EventType eventtype_cancel;
	private EventType eventtype_cup_in;
	private EventType eventtype_drink;

	private EventTypeExtension eventtypeextension_bla;
	private EventTypeExtension eventtypeextension_blubs;
	private EventTypeExtension eventtypeextension_yyy;

	private ElementType elementtype_Coin;
	private ElementType elementtype_Slot;
	private ElementType elementtype_Control;
	private ElementType elementtype_Panel;
	private ElementType elementtype_Safe;
	private ElementType elementtype_Brewer;

	private Reference referencetype_Coin_slot;
	private Reference referencetype_Slot_coin;
	private Reference referencetype_Slot_safe;
	private Reference referencetype_Control_slot;
	private Reference referencetype_Control_brewer;
	private Reference referencetype_Panel_control;
	private Reference referencetype_Brewer_control;


	private VendingMachineModel(ExecutionEngine engine) {
		super (new VendingMachineBehaviour(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		VendingmachinePackage pack = VendingmachinePackage.eINSTANCE;

		getNamespace().setEPackage(pack);
		getNamespace().setUri("example.ecno.vendingmachine");

		formalparameter_insert_coin = ecno_factory.createFormalParameter();
		formalparameter_insert_coin.setName("coin");
		formalparameter_insert_coin.setEType(pack.getCoin());
		formalparameter_insert_slot = ecno_factory.createFormalParameter();
		formalparameter_insert_slot.setName("slot");
		formalparameter_insert_slot.setEType(pack.getSlot());
		formalparameter_pass_coin = ecno_factory.createFormalParameter();
		formalparameter_pass_coin.setName("coin");
		formalparameter_pass_coin.setEType(pack.getCoin());
		formalparameter_pass_slot = ecno_factory.createFormalParameter();
		formalparameter_pass_slot.setName("slot");
		formalparameter_pass_slot.setEType(pack.getSlot());
		formalparameter_return__slot = ecno_factory.createFormalParameter();
		formalparameter_return__slot.setName("slot");
		formalparameter_return__slot.setEType(pack.getSlot());
		formalparameter_drink_brewer = ecno_factory.createFormalParameter();
		formalparameter_drink_brewer.setName("brewer");
		formalparameter_drink_brewer.setEType(pack.getBrewer());
		formalparameter_yyy_test = ecno_factory.createFormalParameter();
		formalparameter_yyy_test.setName("test");
		formalparameter_yyy_test.setEType(org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEString());

		EList<FormalParameter> parameters;
		
		eventtype_insert = ecno_factory.createEventType();
		eventtype_insert.setName("insert");
		eventtype_insert.setGui(true);
		parameters = eventtype_insert.getParameters();
		parameters.add(formalparameter_insert_coin);
		parameters.add(formalparameter_insert_slot);
		addEventType(eventtype_insert);

		eventtype_pass = ecno_factory.createEventType();
		eventtype_pass.setName("pass");
		parameters = eventtype_pass.getParameters();
		parameters.add(formalparameter_pass_coin);
		parameters.add(formalparameter_pass_slot);
		addEventType(eventtype_pass);

		eventtype_return_ = ecno_factory.createEventType();
		eventtype_return_.setName("return_");
		parameters = eventtype_return_.getParameters();
		parameters.add(formalparameter_return__slot);
		addEventType(eventtype_return_);

		eventtype_reset = ecno_factory.createEventType();
		eventtype_reset.setName("reset");
		addEventType(eventtype_reset);

		eventtype_cancel = ecno_factory.createEventType();
		eventtype_cancel.setName("cancel");
		eventtype_cancel.setGui(true);
		addEventType(eventtype_cancel);

		eventtype_cup_in = ecno_factory.createEventType();
		eventtype_cup_in.setName("cup_in");
		eventtype_cup_in.setGui(true);
		addEventType(eventtype_cup_in);

		eventtype_drink = ecno_factory.createEventType();
		eventtype_drink.setName("drink");
		eventtype_drink.setGui(true);
		parameters = eventtype_drink.getParameters();
		parameters.add(formalparameter_drink_brewer);
		addEventType(eventtype_drink);


		eventtypeextension_bla = ecno_factory.createEventTypeExtension();
		eventtypeextension_bla.setName("bla");
		eventtypeextension_bla.setBase(eventtype_drink);
		parameters = eventtypeextension_bla.getParameters();
		addEventTypeExtension(eventtypeextension_bla);

		eventtypeextension_blubs = ecno_factory.createEventTypeExtension();
		eventtypeextension_blubs.setName("blubs");
		eventtypeextension_blubs.setBase(eventtype_drink);
		parameters = eventtypeextension_blubs.getParameters();
		addEventTypeExtension(eventtypeextension_blubs);

		eventtypeextension_yyy = ecno_factory.createEventTypeExtension();
		eventtypeextension_yyy.setName("yyy");
		eventtypeextension_yyy.setBase(eventtype_cancel);
		parameters = eventtypeextension_yyy.getParameters();
		parameters.add(formalparameter_yyy_test);
		addEventTypeExtension(eventtypeextension_yyy);

		eventtypeextension_bla.getSuper().put("n", eventtypeextension_blubs);


		elementtype_Coin = ecno_factory.createElementType();
		elementtype_Coin.setEClass(pack.getCoin());
		elementtype_Coin.setGui(true);
		addElementType(elementtype_Coin);

		elementtype_Slot = ecno_factory.createElementType();
		elementtype_Slot.setEClass(pack.getSlot());
		addElementType(elementtype_Slot);

		elementtype_Control = ecno_factory.createElementType();
		elementtype_Control.setEClass(pack.getControl());
		addElementType(elementtype_Control);

		elementtype_Panel = ecno_factory.createElementType();
		elementtype_Panel.setEClass(pack.getPanel());
		elementtype_Panel.setGui(true);
		addElementType(elementtype_Panel);

		elementtype_Safe = ecno_factory.createElementType();
		elementtype_Safe.setEClass(pack.getSafe());
		addElementType(elementtype_Safe);

		elementtype_Brewer = ecno_factory.createElementType();
		elementtype_Brewer.setEClass(pack.getBrewer());
		addElementType(elementtype_Brewer);



		EList<Reference> references;

		references = elementtype_Coin.getReferences();
		referencetype_Coin_slot = ecno_factory.createReference();
		referencetype_Coin_slot.setEReference(pack.getCoin_Slot());
		referencetype_Coin_slot.setTarget(elementtype_Slot);
		references.add(referencetype_Coin_slot);

		references = elementtype_Slot.getReferences();
		referencetype_Slot_coin = ecno_factory.createReference();
		referencetype_Slot_coin.setEReference(pack.getSlot_Coin());
		referencetype_Slot_coin.setTarget(elementtype_Coin);
		references.add(referencetype_Slot_coin);

		referencetype_Slot_safe = ecno_factory.createReference();
		referencetype_Slot_safe.setEReference(pack.getSlot_Safe());
		referencetype_Slot_safe.setTarget(elementtype_Safe);
		references.add(referencetype_Slot_safe);

		references = elementtype_Control.getReferences();
		referencetype_Control_slot = ecno_factory.createReference();
		referencetype_Control_slot.setEReference(pack.getControl_Slot());
		referencetype_Control_slot.setTarget(elementtype_Slot);
		references.add(referencetype_Control_slot);

		referencetype_Control_brewer = ecno_factory.createReference();
		referencetype_Control_brewer.setEReference(pack.getControl_Brewer());
		referencetype_Control_brewer.setTarget(elementtype_Brewer);
		references.add(referencetype_Control_brewer);

		references = elementtype_Panel.getReferences();
		referencetype_Panel_control = ecno_factory.createReference();
		referencetype_Panel_control.setEReference(pack.getPanel_Control());
		referencetype_Panel_control.setTarget(elementtype_Control);
		references.add(referencetype_Panel_control);

		references = elementtype_Brewer.getReferences();
		referencetype_Brewer_control = ecno_factory.createReference();
		referencetype_Brewer_control.setEReference(pack.getBrewer_Control());
		referencetype_Brewer_control.setTarget(elementtype_Control);
		references.add(referencetype_Brewer_control);


		Synchronisation synch;
		CoordinationSet cset;

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_return_);
		elementtype_Coin.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_pass);
		elementtype_Coin.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_insert);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Coin_slot);
		synch.setEventType(eventtype_insert);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Coin.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_return_);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Slot_coin);
		synch.setEventType(eventtype_return_);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Slot.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_pass);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Slot_coin);
		synch.setEventType(eventtype_pass);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Slot_safe);
		synch.setEventType(eventtype_pass);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Slot.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_insert);
		elementtype_Slot.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_reset);
		elementtype_Slot.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_reset);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Control_slot);
		synch.setEventType(eventtype_reset);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Control_brewer);
		synch.setEventType(eventtype_reset);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Control.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_pass);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Control_slot);
		synch.setEventType(eventtype_pass);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Control.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_drink);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Control_brewer);
		synch.setEventType(eventtype_drink);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Control.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_cancel);
		elementtype_Control.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_cancel);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Panel_control);
		synch.setEventType(eventtype_cancel);
		synch.setType(SynchronisationType.ALL);
		cset.getSynchronisations().add(synch);
		elementtype_Panel.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_drink);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Panel_control);
		synch.setEventType(eventtype_drink);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Panel.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_pass);
		elementtype_Safe.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_cancel);
		synch = ecno_factory.createSynchronisation();
		synch.setReference(referencetype_Brewer_control);
		synch.setEventType(eventtype_cancel);
		synch.setType(SynchronisationType.ONE);
		cset.getSynchronisations().add(synch);
		elementtype_Brewer.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_reset);
		elementtype_Brewer.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_drink);
		elementtype_Brewer.getCoordinationSets().add(cset);

		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(eventtype_cup_in);
		elementtype_Brewer.getCoordinationSets().add(cset);

	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		if (type.equals(eventtype_insert)) {
			return example.ecno.vendingmachine.events.Insert.class;
		} else if (type.equals(eventtype_pass)) {
			return example.ecno.vendingmachine.events.Pass.class;
		} else if (type.equals(eventtype_return_)) {
			return example.ecno.vendingmachine.events.Return_.class;
		} else if (type.equals(eventtype_drink)) {
			return example.ecno.vendingmachine.events.Drink.class;
		} else {
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		if (eventTypeExtension.equals(eventtypeextension_bla)) {
			return example.ecno.vendingmachine.events.Bla.class;
		} else if (eventTypeExtension.equals(eventtypeextension_blubs)) {
			return example.ecno.vendingmachine.events.Blubs.class;
		} else if (eventTypeExtension.equals(eventtypeextension_yyy)) {
			return example.ecno.vendingmachine.events.Yyy.class;
		} else {
			return null;
		}
	}

	public static VendingMachineModel getModel(ExecutionEngine engine) {
		return new VendingMachineModel(engine);
	}

}
