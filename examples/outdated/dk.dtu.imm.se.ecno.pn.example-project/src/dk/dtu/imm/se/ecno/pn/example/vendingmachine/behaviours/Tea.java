/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of a element, as defined by the Petri net.
 */
package dk.dtu.imm.se.ecno.pn.example.vendingmachine.behaviours;

import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;

import dk.dtu.imm.se.ecno.pn.model.ElementType;
import dk.dtu.imm.se.ecno.pn.runtime.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.pn.runtime.Element;
import dk.dtu.imm.se.ecno.pn.runtime.PetriNetChoice;

public class Tea extends AbstractPetrinetBehaviour {
 

	public Tea(ExecutionEngine engine, ElementType type, Element self) {
		super(engine, new int[]{1, 0, 0}, new String[]{"t7", "t8", "t17", "t3"}, type, self);
	}

	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return marking[0] >= 1;
                    
		case 1:
			return marking[1] >= 1;
                    
		case 2:
			return marking[0] >= 1;
                    
		case 3:
			return marking[2] >= 1;
                    
		default:
			return false;	
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		case 1:
			return false;                    
		case 2:
			return false;                    
		case 3:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			marking[0] =  marking[0] - 1;
			marking[1] =  marking[1] + 1;
			break;
			
		case 1:		
			marking[1] =  marking[1] - 1;
			marking[0] =  marking[0] + 1;
			break;
			
		case 2:		
			marking[0] =  marking[0] - 1;
			marking[0] =  marking[0] + 1;
			break;
			
		case 3:		
			marking[2] =  marking[2] - 1;
			break;
						
		}
	}
	
	@Override
	public boolean doesAssignParam(int transition, int event, int param) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				switch (param) {    
                default: return false;
                }
			default: return false;
			}
		case 1:
			switch (event) {
			case 0:
				switch (param) {    
                default: return false;
                }
			default: return false;
			}
		case 2:
			switch (event) {
			case 0:
				switch (param) {    
                default: return false;
                }
			default: return false;
			}
		case 3:
			switch (event) {
			case 0:
				switch (param) {    
                default: return false;
                }
			default: return false;
			}
		default: return false;
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		{
			dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea self = (dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea) getElement();		
			switch (transition) {
			case 0: {
				switch (event) {
				case 0:
					switch (param) {    
                	default: return null;
                	}
				default: return null;
				}
			}
			case 1: {
				switch (event) {
				case 0:
					switch (param) {    
                	default: return null;
                	}
				default: return null;
				}
			}
			case 2: {
				switch (event) {
				case 0:
					switch (param) {    
                	default: return null;
                	}
				default: return null;
				}
			}
			case 3: {
				switch (event) {
				case 0:
					switch (param) {    
                	default: return null;
                	}
				default: return null;
				}
			}
			default: return null;
			}
		}
	}

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		{
			dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea self = (dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea) getElement();
			switch (transition) {
			case 0: {
				return true; 
			}
			case 1: {
				return true; 
			}
			case 2: {
				return true; 
			}
			case 3: {
				return true; 
			}
			default: return false;
			}
		}
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		{
			dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea self = (dk.dtu.imm.se.ecno.pn.example.vendingmachine.Tea) getElement();		
			ParentAction parent = new ParentAction(choice);
			switch (transition) {
			case 0: {
/* DO NOTHING */
            	fire(transition);
				return; 
			}
			case 1: {
/* DO NOTHING */
            	fire(transition);
				return; 
			}
			case 2: {
/* DO NOTHING */
            	fire(transition);
				return; 
			}
			case 3: {
/* DO NOTHING */
            	fire(transition);
				return; 
			}
			default: return;
			}
		}
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "tea" };
		case 1: 
			return new String[] { "cup_in" };
		case 2: 
			return new String[] { "reset" };
		case 3: 
			return new String[] { "coffee" };
		default: return null;
		}  
	}
		
}

