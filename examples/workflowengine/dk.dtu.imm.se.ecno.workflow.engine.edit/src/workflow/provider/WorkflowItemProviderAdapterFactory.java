/**
 */
package workflow.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import workflow.util.WorkflowAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.TaskO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskOItemProvider taskOItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.TaskO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskOAdapter() {
		if (taskOItemProvider == null) {
			taskOItemProvider = new TaskOItemProvider(this);
		}

		return taskOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ActivityO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityOItemProvider activityOItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ActivityO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityOAdapter() {
		if (activityOItemProvider == null) {
			activityOItemProvider = new ActivityOItemProvider(this);
		}

		return activityOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Case} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseItemProvider caseItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Case}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseAdapter() {
		if (caseItemProvider == null) {
			caseItemProvider = new CaseItemProvider(this);
		}

		return caseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.RuntimeInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuntimeInformationItemProvider runtimeInformationItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.RuntimeInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuntimeInformationAdapter() {
		if (runtimeInformationItemProvider == null) {
			runtimeInformationItemProvider = new RuntimeInformationItemProvider(this);
		}

		return runtimeInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ActivityC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityCItemProvider activityCItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ActivityC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityCAdapter() {
		if (activityCItemProvider == null) {
			activityCItemProvider = new ActivityCItemProvider(this);
		}

		return activityCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.CaseC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseCItemProvider caseCItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.CaseC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseCAdapter() {
		if (caseCItemProvider == null) {
			caseCItemProvider = new CaseCItemProvider(this);
		}

		return caseCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.PetriNet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PetriNetItemProvider petriNetItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.PetriNet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPetriNetAdapter() {
		if (petriNetItemProvider == null) {
			petriNetItemProvider = new PetriNetItemProvider(this);
		}

		return petriNetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Arc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcItemProvider arcItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Arc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcAdapter() {
		if (arcItemProvider == null) {
			arcItemProvider = new ArcItemProvider(this);
		}

		return arcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Marking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkingItemProvider markingItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Marking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkingAdapter() {
		if (markingItemProvider == null) {
			markingItemProvider = new MarkingItemProvider(this);
		}

		return markingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Token} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenItemProvider tokenItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Token}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAdapter() {
		if (tokenItemProvider == null) {
			tokenItemProvider = new TokenItemProvider(this);
		}

		return tokenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ModelRegistry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelRegistryItemProvider modelRegistryItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ModelRegistry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelRegistryAdapter() {
		if (modelRegistryItemProvider == null) {
			modelRegistryItemProvider = new ModelRegistryItemProvider(this);
		}

		return modelRegistryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Information} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationItemProvider informationItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Information}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationAdapter() {
		if (informationItemProvider == null) {
			informationItemProvider = new InformationItemProvider(this);
		}

		return informationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.TaskI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskIItemProvider taskIItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.TaskI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskIAdapter() {
		if (taskIItemProvider == null) {
			taskIItemProvider = new TaskIItemProvider(this);
		}

		return taskIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ActivityI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityIItemProvider activityIItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ActivityI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityIAdapter() {
		if (activityIItemProvider == null) {
			activityIItemProvider = new ActivityIItemProvider(this);
		}

		return activityIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.CaseI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseIItemProvider caseIItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.CaseI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseIAdapter() {
		if (caseIItemProvider == null) {
			caseIItemProvider = new CaseIItemProvider(this);
		}

		return caseIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.CoreModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoreModelItemProvider coreModelItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.CoreModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoreModelAdapter() {
		if (coreModelItemProvider == null) {
			coreModelItemProvider = new CoreModelItemProvider(this);
		}

		return coreModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.RuntimeCoreModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuntimeCoreModelItemProvider runtimeCoreModelItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.RuntimeCoreModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuntimeCoreModelAdapter() {
		if (runtimeCoreModelItemProvider == null) {
			runtimeCoreModelItemProvider = new RuntimeCoreModelItemProvider(this);
		}

		return runtimeCoreModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.OrganisationAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganisationAspectItemProvider organisationAspectItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.OrganisationAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganisationAspectAdapter() {
		if (organisationAspectItemProvider == null) {
			organisationAspectItemProvider = new OrganisationAspectItemProvider(this);
		}

		return organisationAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ControlAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlAspectItemProvider controlAspectItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ControlAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlAspectAdapter() {
		if (controlAspectItemProvider == null) {
			controlAspectItemProvider = new ControlAspectItemProvider(this);
		}

		return controlAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.WorkflowEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowEngineItemProvider workflowEngineItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.WorkflowEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowEngineAdapter() {
		if (workflowEngineItemProvider == null) {
			workflowEngineItemProvider = new WorkflowEngineItemProvider(this);
		}

		return workflowEngineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ProcessO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessOItemProvider processOItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ProcessO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessOAdapter() {
		if (processOItemProvider == null) {
			processOItemProvider = new ProcessOItemProvider(this);
		}

		return processOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DefaultDocumentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultDocumentTypeItemProvider defaultDocumentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DefaultDocumentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultDocumentTypeAdapter() {
		if (defaultDocumentTypeItemProvider == null) {
			defaultDocumentTypeItemProvider = new DefaultDocumentTypeItemProvider(this);
		}

		return defaultDocumentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DefaultDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultDocumentItemProvider defaultDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DefaultDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultDocumentAdapter() {
		if (defaultDocumentItemProvider == null) {
			defaultDocumentItemProvider = new DefaultDocumentItemProvider(this);
		}

		return defaultDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.FieldValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldValueItemProvider fieldValueItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.FieldValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldValueAdapter() {
		if (fieldValueItemProvider == null) {
			fieldValueItemProvider = new FieldValueItemProvider(this);
		}

		return fieldValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.InformationAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationAspectItemProvider informationAspectItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.InformationAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationAspectAdapter() {
		if (informationAspectItemProvider == null) {
			informationAspectItemProvider = new InformationAspectItemProvider(this);
		}

		return informationAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.CaseO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseOItemProvider caseOItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.CaseO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseOAdapter() {
		if (caseOItemProvider == null) {
			caseOItemProvider = new CaseOItemProvider(this);
		}

		return caseOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.InformationRuntimeAspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationRuntimeAspectItemProvider informationRuntimeAspectItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.InformationRuntimeAspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationRuntimeAspectAdapter() {
		if (informationRuntimeAspectItemProvider == null) {
			informationRuntimeAspectItemProvider = new InformationRuntimeAspectItemProvider(this);
		}

		return informationRuntimeAspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DefaultDocumentDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultDocumentDescriptorItemProvider defaultDocumentDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DefaultDocumentDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultDocumentDescriptorAdapter() {
		if (defaultDocumentDescriptorItemProvider == null) {
			defaultDocumentDescriptorItemProvider = new DefaultDocumentDescriptorItemProvider(this);
		}

		return defaultDocumentDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ProcessDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessDocumentItemProvider processDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ProcessDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessDocumentAdapter() {
		if (processDocumentItemProvider == null) {
			processDocumentItemProvider = new ProcessDocumentItemProvider(this);
		}

		return processDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected String2DocumentMapItemProvider string2DocumentMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createString2DocumentMapAdapter() {
		if (string2DocumentMapItemProvider == null) {
			string2DocumentMapItemProvider = new String2DocumentMapItemProvider(this);
		}

		return string2DocumentMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Atom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomItemProvider atomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Atom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomAdapter() {
		if (atomItemProvider == null) {
			atomItemProvider = new AtomItemProvider(this);
		}

		return atomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Operator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorItemProvider operatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Operator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorAdapter() {
		if (operatorItemProvider == null) {
			operatorItemProvider = new OperatorItemProvider(this);
		}

		return operatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DocumentDescrAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentDescrAtomItemProvider documentDescrAtomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DocumentDescrAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentDescrAtomAdapter() {
		if (documentDescrAtomItemProvider == null) {
			documentDescrAtomItemProvider = new DocumentDescrAtomItemProvider(this);
		}

		return documentDescrAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.FieldAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldAtomItemProvider fieldAtomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.FieldAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAtomAdapter() {
		if (fieldAtomItemProvider == null) {
			fieldAtomItemProvider = new FieldAtomItemProvider(this);
		}

		return fieldAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.ConstantAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantAtomItemProvider constantAtomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.ConstantAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAtomAdapter() {
		if (constantAtomItemProvider == null) {
			constantAtomItemProvider = new ConstantAtomItemProvider(this);
		}

		return constantAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DotOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotOperatorItemProvider dotOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DotOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotOperatorAdapter() {
		if (dotOperatorItemProvider == null) {
			dotOperatorItemProvider = new DotOperatorItemProvider(this);
		}

		return dotOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EqualToOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualToOperatorItemProvider equalToOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EqualToOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualToOperatorAdapter() {
		if (equalToOperatorItemProvider == null) {
			equalToOperatorItemProvider = new EqualToOperatorItemProvider(this);
		}

		return equalToOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DefaultDocumentCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultDocumentConditionItemProvider defaultDocumentConditionItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DefaultDocumentCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultDocumentConditionAdapter() {
		if (defaultDocumentConditionItemProvider == null) {
			defaultDocumentConditionItemProvider = new DefaultDocumentConditionItemProvider(this);
		}

		return defaultDocumentConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EnumField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumFieldItemProvider enumFieldItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EnumField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumFieldAdapter() {
		if (enumFieldItemProvider == null) {
			enumFieldItemProvider = new EnumFieldItemProvider(this);
		}

		return enumFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralItemProvider enumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumLiteralAdapter() {
		if (enumLiteralItemProvider == null) {
			enumLiteralItemProvider = new EnumLiteralItemProvider(this);
		}

		return enumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EnumFieldValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumFieldValueItemProvider enumFieldValueItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EnumFieldValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumFieldValueAdapter() {
		if (enumFieldValueItemProvider == null) {
			enumFieldValueItemProvider = new EnumFieldValueItemProvider(this);
		}

		return enumFieldValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.LessThanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessThanOperatorItemProvider lessThanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.LessThanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessThanOperatorAdapter() {
		if (lessThanOperatorItemProvider == null) {
			lessThanOperatorItemProvider = new LessThanOperatorItemProvider(this);
		}

		return lessThanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.GreaterThanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanOperatorItemProvider greaterThanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.GreaterThanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanOperatorAdapter() {
		if (greaterThanOperatorItemProvider == null) {
			greaterThanOperatorItemProvider = new GreaterThanOperatorItemProvider(this);
		}

		return greaterThanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EnumFieldAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumFieldAtomItemProvider enumFieldAtomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EnumFieldAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumFieldAtomAdapter() {
		if (enumFieldAtomItemProvider == null) {
			enumFieldAtomItemProvider = new EnumFieldAtomItemProvider(this);
		}

		return enumFieldAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.EnumLiteralAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralAtomItemProvider enumLiteralAtomItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.EnumLiteralAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumLiteralAtomAdapter() {
		if (enumLiteralAtomItemProvider == null) {
			enumLiteralAtomItemProvider = new EnumLiteralAtomItemProvider(this);
		}

		return enumLiteralAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.UnequalToOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnequalToOperatorItemProvider unequalToOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.UnequalToOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnequalToOperatorAdapter() {
		if (unequalToOperatorItemProvider == null) {
			unequalToOperatorItemProvider = new UnequalToOperatorItemProvider(this);
		}

		return unequalToOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.AgentContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentContainerItemProvider agentContainerItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.AgentContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentContainerAdapter() {
		if (agentContainerItemProvider == null) {
			agentContainerItemProvider = new AgentContainerItemProvider(this);
		}

		return agentContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Organisation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganisationItemProvider organisationItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Organisation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganisationAdapter() {
		if (organisationItemProvider == null) {
			organisationItemProvider = new OrganisationItemProvider(this);
		}

		return organisationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DocumentTypeContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentTypeContainerItemProvider documentTypeContainerItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DocumentTypeContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentTypeContainerAdapter() {
		if (documentTypeContainerItemProvider == null) {
			documentTypeContainerItemProvider = new DocumentTypeContainerItemProvider(this);
		}

		return documentTypeContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DocumentContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentContainerItemProvider documentContainerItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DocumentContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentContainerAdapter() {
		if (documentContainerItemProvider == null) {
			documentContainerItemProvider = new DocumentContainerItemProvider(this);
		}

		return documentContainerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (taskOItemProvider != null) taskOItemProvider.dispose();
		if (activityOItemProvider != null) activityOItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (caseItemProvider != null) caseItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (runtimeInformationItemProvider != null) runtimeInformationItemProvider.dispose();
		if (activityCItemProvider != null) activityCItemProvider.dispose();
		if (caseCItemProvider != null) caseCItemProvider.dispose();
		if (petriNetItemProvider != null) petriNetItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (arcItemProvider != null) arcItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (markingItemProvider != null) markingItemProvider.dispose();
		if (tokenItemProvider != null) tokenItemProvider.dispose();
		if (modelRegistryItemProvider != null) modelRegistryItemProvider.dispose();
		if (informationItemProvider != null) informationItemProvider.dispose();
		if (taskIItemProvider != null) taskIItemProvider.dispose();
		if (activityIItemProvider != null) activityIItemProvider.dispose();
		if (caseIItemProvider != null) caseIItemProvider.dispose();
		if (coreModelItemProvider != null) coreModelItemProvider.dispose();
		if (processItemProvider != null) processItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (runtimeCoreModelItemProvider != null) runtimeCoreModelItemProvider.dispose();
		if (organisationAspectItemProvider != null) organisationAspectItemProvider.dispose();
		if (controlAspectItemProvider != null) controlAspectItemProvider.dispose();
		if (workflowEngineItemProvider != null) workflowEngineItemProvider.dispose();
		if (processOItemProvider != null) processOItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (defaultDocumentTypeItemProvider != null) defaultDocumentTypeItemProvider.dispose();
		if (defaultDocumentItemProvider != null) defaultDocumentItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (fieldValueItemProvider != null) fieldValueItemProvider.dispose();
		if (informationAspectItemProvider != null) informationAspectItemProvider.dispose();
		if (caseOItemProvider != null) caseOItemProvider.dispose();
		if (informationRuntimeAspectItemProvider != null) informationRuntimeAspectItemProvider.dispose();
		if (defaultDocumentDescriptorItemProvider != null) defaultDocumentDescriptorItemProvider.dispose();
		if (processDocumentItemProvider != null) processDocumentItemProvider.dispose();
		if (string2DocumentMapItemProvider != null) string2DocumentMapItemProvider.dispose();
		if (atomItemProvider != null) atomItemProvider.dispose();
		if (operatorItemProvider != null) operatorItemProvider.dispose();
		if (documentDescrAtomItemProvider != null) documentDescrAtomItemProvider.dispose();
		if (fieldAtomItemProvider != null) fieldAtomItemProvider.dispose();
		if (constantAtomItemProvider != null) constantAtomItemProvider.dispose();
		if (dotOperatorItemProvider != null) dotOperatorItemProvider.dispose();
		if (equalToOperatorItemProvider != null) equalToOperatorItemProvider.dispose();
		if (defaultDocumentConditionItemProvider != null) defaultDocumentConditionItemProvider.dispose();
		if (enumFieldItemProvider != null) enumFieldItemProvider.dispose();
		if (enumLiteralItemProvider != null) enumLiteralItemProvider.dispose();
		if (enumFieldValueItemProvider != null) enumFieldValueItemProvider.dispose();
		if (lessThanOperatorItemProvider != null) lessThanOperatorItemProvider.dispose();
		if (greaterThanOperatorItemProvider != null) greaterThanOperatorItemProvider.dispose();
		if (enumFieldAtomItemProvider != null) enumFieldAtomItemProvider.dispose();
		if (enumLiteralAtomItemProvider != null) enumLiteralAtomItemProvider.dispose();
		if (unequalToOperatorItemProvider != null) unequalToOperatorItemProvider.dispose();
		if (agentContainerItemProvider != null) agentContainerItemProvider.dispose();
		if (organisationItemProvider != null) organisationItemProvider.dispose();
		if (documentTypeContainerItemProvider != null) documentTypeContainerItemProvider.dispose();
		if (documentContainerItemProvider != null) documentContainerItemProvider.dispose();
	}

}
