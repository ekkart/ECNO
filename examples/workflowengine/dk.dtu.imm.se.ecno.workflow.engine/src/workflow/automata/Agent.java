/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
package workflow.automata;

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.pn.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.pn.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine; 

@SuppressWarnings("unused")
public class Agent extends AbstractPetrinetBehaviour<workflow.Agent> {


final coded.util.AgentUtil util =coded.util.AgentUtil.getInstance(); 	
	public Agent(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (workflow.Agent) element, new int[]{1, 0}, new String[]{"t0", "t1", "t2", "t3", "t4"}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
		case 0:
			return marking.get(0) >= 1;
                    
		case 1:
			return marking.get(1) >= 1;
                    
		case 2:
			return true;
                    
		case 3:
			return marking.get(1) >= 1;
                    
		case 4:
			return marking.get(1) >= 1;
                    
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
		case 0:
            m[0]--;
            break;
                    
		case 1:
            m[1]--;
            break;
                    
		case 2:
            break;
                    
		case 3:
            m[1]--;
            break;
                    
		case 4:
            m[1]--;
            break;
                    
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
		case 0:
			return false;                    
		case 1:
			return false;                    
		case 2:
			return false;                    
		case 3:
			return false;                    
		case 4:
			return false;                    
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
		case 0:		
			marking.set(0, marking.get(0) - 1);
			marking.set(1,  marking.get(1) + 1);
			break;
			
		case 1:		
			marking.set(1, marking.get(1) - 1);
			marking.set(0,  marking.get(0) + 1);
			break;
			
		case 2:		
			break;
			
		case 3:		
			marking.set(1, marking.get(1) - 1);
			marking.set(1,  marking.get(1) + 1);
			break;
			
		case 4:		
			marking.set(1, marking.get(1) - 1);
			marking.set(1,  marking.get(1) + 1);
			break;
						
		}
	}
	
	@Override
	public boolean doesAssignParam(int transition, int event, int param) {
		switch (transition) {
		case 0:
			switch (event) {
			case 0:
				switch (param) {
				case 0: return false;			
				case 1: return false;			    
                default: return false;
                }
			default: return false;
			}
		case 1:
			switch (event) {
			case 0:
				switch (param) {
				case 0: return false;			    
                default: return false;
                }
			default: return false;
			}
		case 2:
			switch (event) {
			default: return false;
			}
		case 3:
			switch (event) {
			case 0:
				switch (param) {
				case 0: return false;			
				case 1: return false;			
				case 2: return false;			    
                default: return false;
                }
			default: return false;
			}
		case 4:
			switch (event) {
			case 0:
				switch (param) {
				case 0: return false;			    
                default: return false;
                }
			default: return false;
			}
		default: return false;
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		workflow.Agent self = self();
				
		switch (transition) {
		case 0: {
			workflow.events.Login login = 
			    (workflow.events.Login) choice.getEventValues("Login");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 1: {
			workflow.events.Logout logout = 
			    (workflow.events.Logout) choice.getEventValues("Logout");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 2: {
			switch (event) {
			default: return null;
			}
		}
		case 3: {
			workflow.events.StartActivity s = 
			    (workflow.events.StartActivity) choice.getEventValues("StartActivity");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		case 4: {
			workflow.events.FinishActivity f = 
			    (workflow.events.FinishActivity) choice.getEventValues("FinishActivity");
			switch (event) {
			case 0:
				switch (param) {    
                default: return null;
                }
			default: return null;
			}
		}
		default: return null;
		}  
	}	

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		workflow.Agent self = self();
		
		switch (transition) {
		case 0: {
			workflow.events.Login login = 
                (workflow.events.Login) choice.getEventValues("Login");
			return login.password.equals(self.getPassword()) && login.username.equals(self.getUsername()); 
		}
		case 1: {
			workflow.events.Logout logout = 
                (workflow.events.Logout) choice.getEventValues("Logout");
			return self == logout.agent; 
		}
		case 2: {
			return true; 
		}
		case 3: {
			workflow.events.StartActivity s = 
                (workflow.events.StartActivity) choice.getEventValues("StartActivity");
			return self == s.agent && util.evaluateFollowupAndRole(s.task,s.agent,s.case_); 
		}
		case 4: {
			workflow.events.FinishActivity f = 
                (workflow.events.FinishActivity) choice.getEventValues("FinishActivity");
			return true; 
		}
		default: return false;
		}  
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		workflow.Agent self = self();
		
		switch (transition) {
		case 0: {
			workflow.events.Login login =
                (workflow.events.Login) choice.getEventValues("Login");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 1: {
			workflow.events.Logout logout =
                (workflow.events.Logout) choice.getEventValues("Logout");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 2: {
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 3: {
			workflow.events.StartActivity s =
                (workflow.events.StartActivity) choice.getEventValues("StartActivity");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		case 4: {
			workflow.events.FinishActivity f =
                (workflow.events.FinishActivity) choice.getEventValues("FinishActivity");
/* DO NOTHING */
            fire(transition);
			return; 
		}
		default: return;
		}  
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
		case 0: 
			return new String[] { "Login" };
		case 1: 
			return new String[] { "Logout" };
		case 2: 
			return new String[] {  };
		case 3: 
			return new String[] { "StartActivity" };
		case 4: 
			return new String[] { "FinishActivity" };
		default: return null;
		}  
	}
		
}

