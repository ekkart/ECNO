/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
package workflow.coordination;

import org.eclipse.emf.common.util.EList;

import workflow.WorkflowPackage;
import workflow.automata.WorkflowBehavior;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
import dk.dtu.imm.se.ecno.model.ecno.EventType;
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
import dk.dtu.imm.se.ecno.model.ecno.Reference;
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;

public class WorkflowEcnoModel extends EMFPackageAdapter {
	
	private FormalParameter formalparameter_CreateCase_process;	
	private FormalParameter formalparameter_Login_username;	
	private FormalParameter formalparameter_Login_password;	
	private FormalParameter formalparameter_Logout_agent;	
	private FormalParameter formalparameter_Pull_activity;	
	private FormalParameter formalparameter_FinishActivity_activity;	
	private FormalParameter formalparameter_Add_marking_;	
	private FormalParameter formalparameter_Remove_marking_;	
	private FormalParameter formalparameter_StartActivity_task;	
	private FormalParameter formalparameter_StartActivity_agent;	
	private FormalParameter formalparameter_StartActivity_case_;	
	private FormalParameter formalparameter_StartActivityC_state;	
	private FormalParameter formalparameter_StartActivityC_task;	
	private FormalParameter formalparameter_FinishActivityC_state;	
	private FormalParameter formalparameter_StartActivityI_caseI;	
	private FormalParameter formalparameter_StartActivityI_task;
	
	private EventType eventtype_CreateCase;	
	private EventType eventtype_Login;	
	private EventType eventtype_Logout;	
	private EventType eventtype_Pull;	
	private EventType eventtype_FinishActivity;	
	private EventType eventtype_Add;	
	private EventType eventtype_Remove;	
	private EventType eventtype_StartActivity;	
	private EventType eventtype_StartActivityC;	
	private EventType eventtype_FinishActivityC;	
	private EventType eventtype_StartActivityI;
	
	private ElementType elementtype_Process;	
	private ElementType elementtype_Agent;	
	private ElementType elementtype_ActivityO;	
	private ElementType elementtype_Transition;	
	private ElementType elementtype_Place;	
	private ElementType elementtype_Arc;	
	private ElementType elementtype_Activity;	
	private ElementType elementtype_ActivityC;	
	private ElementType elementtype_Case;	
	private ElementType elementtype_Task;	
	private ElementType elementtype_CaseC;	
	private ElementType elementtype_CaseO;	
	private ElementType elementtype_Marking;	
	private ElementType elementtype_PetriNet;	
	private ElementType elementtype_CaseI;	
	private ElementType elementtype_Information;	
	private ElementType elementtype_TaskI;	
	private ElementType elementtype_DefaultDocumentDescriptor;	
	private ElementType elementtype_ActivityI;	
	private ElementType elementtype_DefaultDocumentCondition;
	
	private Reference referencetype_Process_tasks;	
	private Reference referencetype_ActivityO_assignedTo;	
	private Reference referencetype_Transition_out;	
	private Reference referencetype_Transition_in;	
	private Reference referencetype_Arc_targetPlace;	
	private Reference referencetype_Arc_sourcePlace;	
	private Reference referencetype_Activity_aspects;	
	private Reference referencetype_Activity_aspects_2;	
	private Reference referencetype_Activity_aspects_3;	
	private Reference referencetype_ActivityC_task;	
	private Reference referencetype_Case_process;	
	private Reference referencetype_Case_aspects;	
	private Reference referencetype_Case_aspects_2;	
	private Reference referencetype_Case_aspects_3;	
	private Reference referencetype_CaseC_state;	
	private Reference referencetype_CaseO_involved;	
	private Reference referencetype_Marking_petrinet;	
	private Reference referencetype_PetriNet_tasks;	
	private Reference referencetype_CaseI_process;	
	private Reference referencetype_Information_tasks;	
	private Reference referencetype_TaskI_in;	
	private Reference referencetype_TaskI_out;	
	private Reference referencetype_TaskI_start;	
	private Reference referencetype_TaskI_finish;	
	private Reference referencetype_ActivityI_task;
	
	
	private WorkflowEcnoModel(ExecutionEngine engine) {
		super (new WorkflowBehavior(engine));
		createModel();
	}

    protected void createModel() {
    	EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
    	WorkflowPackage pack = WorkflowPackage.eINSTANCE;

    	getNamespace().setEPackage(pack);
    		
	    formalparameter_CreateCase_process = ecno_factory.createFormalParameter();
	    formalparameter_CreateCase_process.setName("process");
	    formalparameter_CreateCase_process.setEType(pack.getProcess());	
	    formalparameter_Login_username = ecno_factory.createFormalParameter();
	    formalparameter_Login_username.setName("username");
	    formalparameter_Login_username.setEType(pack.getMyString());	
	    formalparameter_Login_password = ecno_factory.createFormalParameter();
	    formalparameter_Login_password.setName("password");
	    formalparameter_Login_password.setEType(pack.getMyString());	
	    formalparameter_Logout_agent = ecno_factory.createFormalParameter();
	    formalparameter_Logout_agent.setName("agent");
	    formalparameter_Logout_agent.setEType(pack.getAgent());	
	    formalparameter_Pull_activity = ecno_factory.createFormalParameter();
	    formalparameter_Pull_activity.setName("activity");
	    formalparameter_Pull_activity.setEType(pack.getActivity());	
	    formalparameter_FinishActivity_activity = ecno_factory.createFormalParameter();
	    formalparameter_FinishActivity_activity.setName("activity");
	    formalparameter_FinishActivity_activity.setEType(pack.getActivity());	
	    formalparameter_Add_marking_ = ecno_factory.createFormalParameter();
	    formalparameter_Add_marking_.setName("marking_");
	    formalparameter_Add_marking_.setEType(pack.getMarking());	
	    formalparameter_Remove_marking_ = ecno_factory.createFormalParameter();
	    formalparameter_Remove_marking_.setName("marking_");
	    formalparameter_Remove_marking_.setEType(pack.getMarking());	
	    formalparameter_StartActivity_task = ecno_factory.createFormalParameter();
	    formalparameter_StartActivity_task.setName("task");
	    formalparameter_StartActivity_task.setEType(pack.getTask());	
	    formalparameter_StartActivity_agent = ecno_factory.createFormalParameter();
	    formalparameter_StartActivity_agent.setName("agent");
	    formalparameter_StartActivity_agent.setEType(pack.getAgent());	
	    formalparameter_StartActivity_case_ = ecno_factory.createFormalParameter();
	    formalparameter_StartActivity_case_.setName("case_");
	    formalparameter_StartActivity_case_.setEType(pack.getCase());	
	    formalparameter_StartActivityC_state = ecno_factory.createFormalParameter();
	    formalparameter_StartActivityC_state.setName("state");
	    formalparameter_StartActivityC_state.setEType(pack.getState());	
	    formalparameter_StartActivityC_task = ecno_factory.createFormalParameter();
	    formalparameter_StartActivityC_task.setName("task");
	    formalparameter_StartActivityC_task.setEType(pack.getTask());	
	    formalparameter_FinishActivityC_state = ecno_factory.createFormalParameter();
	    formalparameter_FinishActivityC_state.setName("state");
	    formalparameter_FinishActivityC_state.setEType(pack.getState());	
	    formalparameter_StartActivityI_caseI = ecno_factory.createFormalParameter();
	    formalparameter_StartActivityI_caseI.setName("caseI");
	    formalparameter_StartActivityI_caseI.setEType(pack.getCaseI());	
	    formalparameter_StartActivityI_task = ecno_factory.createFormalParameter();
	    formalparameter_StartActivityI_task.setName("task");
	    formalparameter_StartActivityI_task.setEType(pack.getTask());

    	EList<FormalParameter> parameters;
	
	    eventtype_CreateCase = ecno_factory.createEventType();
	    eventtype_CreateCase.setName("CreateCase");
    	parameters = eventtype_CreateCase.getParameters();
    	parameters.add(formalparameter_CreateCase_process);        
        addEventType(eventtype_CreateCase);
        	
	    eventtype_Login = ecno_factory.createEventType();
	    eventtype_Login.setName("Login");
    	parameters = eventtype_Login.getParameters();
    	parameters.add(formalparameter_Login_username);        
    	parameters.add(formalparameter_Login_password);        
        addEventType(eventtype_Login);
        	
	    eventtype_Logout = ecno_factory.createEventType();
	    eventtype_Logout.setName("Logout");
    	parameters = eventtype_Logout.getParameters();
    	parameters.add(formalparameter_Logout_agent);        
        addEventType(eventtype_Logout);
        	
	    eventtype_Pull = ecno_factory.createEventType();
	    eventtype_Pull.setName("Pull");
    	parameters = eventtype_Pull.getParameters();
    	parameters.add(formalparameter_Pull_activity);        
        addEventType(eventtype_Pull);
        	
	    eventtype_FinishActivity = ecno_factory.createEventType();
	    eventtype_FinishActivity.setName("FinishActivity");
    	parameters = eventtype_FinishActivity.getParameters();
    	parameters.add(formalparameter_FinishActivity_activity);        
        addEventType(eventtype_FinishActivity);
        	
	    eventtype_Add = ecno_factory.createEventType();
	    eventtype_Add.setName("Add");
    	parameters = eventtype_Add.getParameters();
    	parameters.add(formalparameter_Add_marking_);        
        addEventType(eventtype_Add);
        	
	    eventtype_Remove = ecno_factory.createEventType();
	    eventtype_Remove.setName("Remove");
    	parameters = eventtype_Remove.getParameters();
    	parameters.add(formalparameter_Remove_marking_);        
        addEventType(eventtype_Remove);
        	
	    eventtype_StartActivity = ecno_factory.createEventType();
	    eventtype_StartActivity.setName("StartActivity");
    	parameters = eventtype_StartActivity.getParameters();
    	parameters.add(formalparameter_StartActivity_task);        
    	parameters.add(formalparameter_StartActivity_agent);        
    	parameters.add(formalparameter_StartActivity_case_);        
        addEventType(eventtype_StartActivity);
        	
	    eventtype_StartActivityC = ecno_factory.createEventType();
	    eventtype_StartActivityC.setName("StartActivityC");
    	parameters = eventtype_StartActivityC.getParameters();
    	parameters.add(formalparameter_StartActivityC_state);        
    	parameters.add(formalparameter_StartActivityC_task);        
        addEventType(eventtype_StartActivityC);
        	
	    eventtype_FinishActivityC = ecno_factory.createEventType();
	    eventtype_FinishActivityC.setName("FinishActivityC");
    	parameters = eventtype_FinishActivityC.getParameters();
    	parameters.add(formalparameter_FinishActivityC_state);        
        addEventType(eventtype_FinishActivityC);
        	
	    eventtype_StartActivityI = ecno_factory.createEventType();
	    eventtype_StartActivityI.setName("StartActivityI");
    	parameters = eventtype_StartActivityI.getParameters();
    	parameters.add(formalparameter_StartActivityI_caseI);        
    	parameters.add(formalparameter_StartActivityI_task);        
        addEventType(eventtype_StartActivityI);
        

	
	    elementtype_Process = ecno_factory.createElementType();
	    elementtype_Process.setEClass(pack.getProcess()); 
    	addElementType(elementtype_Process);
    	 	    	
	    elementtype_Agent = ecno_factory.createElementType();
	    elementtype_Agent.setEClass(pack.getAgent()); 
    	addElementType(elementtype_Agent);
    	 	    	
	    elementtype_ActivityO = ecno_factory.createElementType();
	    elementtype_ActivityO.setEClass(pack.getActivityO()); 
    	addElementType(elementtype_ActivityO);
    	 	    	
	    elementtype_Transition = ecno_factory.createElementType();
	    elementtype_Transition.setEClass(pack.getTransition()); 
    	addElementType(elementtype_Transition);
    	 	    	
	    elementtype_Place = ecno_factory.createElementType();
	    elementtype_Place.setEClass(pack.getPlace()); 
    	addElementType(elementtype_Place);
    	 	    	
	    elementtype_Arc = ecno_factory.createElementType();
	    elementtype_Arc.setEClass(pack.getArc()); 
    	addElementType(elementtype_Arc);
    	 	    	
	    elementtype_Activity = ecno_factory.createElementType();
	    elementtype_Activity.setEClass(pack.getActivity()); 
    	addElementType(elementtype_Activity);
    	 	    	
	    elementtype_ActivityC = ecno_factory.createElementType();
	    elementtype_ActivityC.setEClass(pack.getActivityC()); 
    	addElementType(elementtype_ActivityC);
    	 	    	
	    elementtype_Case = ecno_factory.createElementType();
	    elementtype_Case.setEClass(pack.getCase()); 
    	addElementType(elementtype_Case);
    	 	    	
	    elementtype_Task = ecno_factory.createElementType();
	    elementtype_Task.setEClass(pack.getTask()); 
    	addElementType(elementtype_Task);
    	 	    	
	    elementtype_CaseC = ecno_factory.createElementType();
	    elementtype_CaseC.setEClass(pack.getCaseC()); 
    	addElementType(elementtype_CaseC);
    	 	    	
	    elementtype_CaseO = ecno_factory.createElementType();
	    elementtype_CaseO.setEClass(pack.getCaseO()); 
    	addElementType(elementtype_CaseO);
    	 	    	
	    elementtype_Marking = ecno_factory.createElementType();
	    elementtype_Marking.setEClass(pack.getMarking()); 
    	addElementType(elementtype_Marking);
    	 	    	
	    elementtype_PetriNet = ecno_factory.createElementType();
	    elementtype_PetriNet.setEClass(pack.getPetriNet()); 
    	addElementType(elementtype_PetriNet);
    	 	    	
	    elementtype_CaseI = ecno_factory.createElementType();
	    elementtype_CaseI.setEClass(pack.getCaseI()); 
    	addElementType(elementtype_CaseI);
    	 	    	
	    elementtype_Information = ecno_factory.createElementType();
	    elementtype_Information.setEClass(pack.getInformation()); 
    	addElementType(elementtype_Information);
    	 	    	
	    elementtype_TaskI = ecno_factory.createElementType();
	    elementtype_TaskI.setEClass(pack.getTaskI()); 
    	addElementType(elementtype_TaskI);
    	 	    	
	    elementtype_DefaultDocumentDescriptor = ecno_factory.createElementType();
	    elementtype_DefaultDocumentDescriptor.setEClass(pack.getDefaultDocumentDescriptor()); 
    	addElementType(elementtype_DefaultDocumentDescriptor);
    	 	    	
	    elementtype_ActivityI = ecno_factory.createElementType();
	    elementtype_ActivityI.setEClass(pack.getActivityI()); 
    	addElementType(elementtype_ActivityI);
    	 	    	
	    elementtype_DefaultDocumentCondition = ecno_factory.createElementType();
	    elementtype_DefaultDocumentCondition.setEClass(pack.getDefaultDocumentCondition()); 
    	addElementType(elementtype_DefaultDocumentCondition);
    	 	        	
    	
        EList<Reference> references;
       
        references = elementtype_Process.getReferences();	
	    referencetype_Process_tasks = ecno_factory.createReference();
	    referencetype_Process_tasks.setEReference(pack.getProcess_Tasks());
	    referencetype_Process_tasks.setTarget(elementtype_Task);
	    references.add(referencetype_Process_tasks);
	       
        references = elementtype_Agent.getReferences();
        references = elementtype_ActivityO.getReferences();	
	    referencetype_ActivityO_assignedTo = ecno_factory.createReference();
	    referencetype_ActivityO_assignedTo.setEReference(pack.getActivityO_AssignedTo());
	    referencetype_ActivityO_assignedTo.setTarget(elementtype_Agent);
	    references.add(referencetype_ActivityO_assignedTo);
	       
        references = elementtype_Transition.getReferences();	
	    referencetype_Transition_out = ecno_factory.createReference();
	    referencetype_Transition_out.setEReference(pack.getTransition_Out());
	    referencetype_Transition_out.setTarget(elementtype_Arc);
	    references.add(referencetype_Transition_out);
	       	
	    referencetype_Transition_in = ecno_factory.createReference();
	    referencetype_Transition_in.setEReference(pack.getTransition_In());
	    referencetype_Transition_in.setTarget(elementtype_Arc);
	    references.add(referencetype_Transition_in);
	       
        references = elementtype_Place.getReferences();
        references = elementtype_Arc.getReferences();	
	    referencetype_Arc_targetPlace = ecno_factory.createReference();
	    referencetype_Arc_targetPlace.setEReference(pack.getArc_TargetPlace());
	    referencetype_Arc_targetPlace.setTarget(elementtype_Place);
	    references.add(referencetype_Arc_targetPlace);
	       	
	    referencetype_Arc_sourcePlace = ecno_factory.createReference();
	    referencetype_Arc_sourcePlace.setEReference(pack.getArc_SourcePlace());
	    referencetype_Arc_sourcePlace.setTarget(elementtype_Place);
	    references.add(referencetype_Arc_sourcePlace);
	       
        references = elementtype_Activity.getReferences();	
	    referencetype_Activity_aspects = ecno_factory.createReference();
	    referencetype_Activity_aspects.setEReference(pack.getActivity_Aspects());
	    referencetype_Activity_aspects.setTarget(elementtype_ActivityC);
	    references.add(referencetype_Activity_aspects);
	       	
	    referencetype_Activity_aspects_2 = ecno_factory.createReference();
	    referencetype_Activity_aspects_2.setEReference(pack.getActivity_Aspects());
	    referencetype_Activity_aspects_2.setTarget(elementtype_ActivityO);
	    references.add(referencetype_Activity_aspects_2);
	       	
	    referencetype_Activity_aspects_3 = ecno_factory.createReference();
	    referencetype_Activity_aspects_3.setEReference(pack.getActivity_Aspects());
	    referencetype_Activity_aspects_3.setTarget(elementtype_ActivityI);
	    references.add(referencetype_Activity_aspects_3);
	       
        references = elementtype_ActivityC.getReferences();	
	    referencetype_ActivityC_task = ecno_factory.createReference();
	    referencetype_ActivityC_task.setEReference(pack.getActivityAspect_Task());
	    referencetype_ActivityC_task.setTarget(elementtype_Transition);
	    references.add(referencetype_ActivityC_task);
	       
        references = elementtype_Case.getReferences();	
	    referencetype_Case_process = ecno_factory.createReference();
	    referencetype_Case_process.setEReference(pack.getCase_Process());
	    referencetype_Case_process.setTarget(elementtype_Process);
	    references.add(referencetype_Case_process);
	       	
	    referencetype_Case_aspects = ecno_factory.createReference();
	    referencetype_Case_aspects.setEReference(pack.getCase_Aspects());
	    referencetype_Case_aspects.setTarget(elementtype_CaseC);
	    references.add(referencetype_Case_aspects);
	       	
	    referencetype_Case_aspects_2 = ecno_factory.createReference();
	    referencetype_Case_aspects_2.setEReference(pack.getCase_Aspects());
	    referencetype_Case_aspects_2.setTarget(elementtype_CaseO);
	    references.add(referencetype_Case_aspects_2);
	       	
	    referencetype_Case_aspects_3 = ecno_factory.createReference();
	    referencetype_Case_aspects_3.setEReference(pack.getCase_Aspects());
	    referencetype_Case_aspects_3.setTarget(elementtype_CaseI);
	    references.add(referencetype_Case_aspects_3);
	       
        references = elementtype_Task.getReferences();
        references = elementtype_CaseC.getReferences();	
	    referencetype_CaseC_state = ecno_factory.createReference();
	    referencetype_CaseC_state.setEReference(pack.getCaseC_State());
	    referencetype_CaseC_state.setTarget(elementtype_Marking);
	    references.add(referencetype_CaseC_state);
	       
        references = elementtype_CaseO.getReferences();	
	    referencetype_CaseO_involved = ecno_factory.createReference();
	    referencetype_CaseO_involved.setEReference(pack.getCaseO_Involved());
	    referencetype_CaseO_involved.setTarget(elementtype_Agent);
	    references.add(referencetype_CaseO_involved);
	       
        references = elementtype_Marking.getReferences();	
	    referencetype_Marking_petrinet = ecno_factory.createReference();
	    referencetype_Marking_petrinet.setEReference(pack.getMarking_Petrinet());
	    referencetype_Marking_petrinet.setTarget(elementtype_PetriNet);
	    references.add(referencetype_Marking_petrinet);
	       
        references = elementtype_PetriNet.getReferences();	
	    referencetype_PetriNet_tasks = ecno_factory.createReference();
	    referencetype_PetriNet_tasks.setEReference(pack.getProcessAspect_Tasks());
	    referencetype_PetriNet_tasks.setTarget(elementtype_Transition);
	    references.add(referencetype_PetriNet_tasks);
	       
        references = elementtype_CaseI.getReferences();	
	    referencetype_CaseI_process = ecno_factory.createReference();
	    referencetype_CaseI_process.setEReference(pack.getCaseAspect_Process());
	    referencetype_CaseI_process.setTarget(elementtype_Information);
	    references.add(referencetype_CaseI_process);
	       
        references = elementtype_Information.getReferences();	
	    referencetype_Information_tasks = ecno_factory.createReference();
	    referencetype_Information_tasks.setEReference(pack.getProcessAspect_Tasks());
	    referencetype_Information_tasks.setTarget(elementtype_TaskI);
	    references.add(referencetype_Information_tasks);
	       
        references = elementtype_TaskI.getReferences();	
	    referencetype_TaskI_in = ecno_factory.createReference();
	    referencetype_TaskI_in.setEReference(pack.getTaskI_In());
	    referencetype_TaskI_in.setTarget(elementtype_DefaultDocumentDescriptor);
	    references.add(referencetype_TaskI_in);
	       	
	    referencetype_TaskI_out = ecno_factory.createReference();
	    referencetype_TaskI_out.setEReference(pack.getTaskI_Out());
	    referencetype_TaskI_out.setTarget(elementtype_DefaultDocumentDescriptor);
	    references.add(referencetype_TaskI_out);
	       	
	    referencetype_TaskI_start = ecno_factory.createReference();
	    referencetype_TaskI_start.setEReference(pack.getTaskI_Start());
	    referencetype_TaskI_start.setTarget(elementtype_DefaultDocumentCondition);
	    references.add(referencetype_TaskI_start);
	       	
	    referencetype_TaskI_finish = ecno_factory.createReference();
	    referencetype_TaskI_finish.setEReference(pack.getTaskI_Finish());
	    referencetype_TaskI_finish.setTarget(elementtype_DefaultDocumentCondition);
	    references.add(referencetype_TaskI_finish);
	       
        references = elementtype_DefaultDocumentDescriptor.getReferences();
        references = elementtype_ActivityI.getReferences();	
	    referencetype_ActivityI_task = ecno_factory.createReference();
	    referencetype_ActivityI_task.setEReference(pack.getActivityAspect_Task());
	    referencetype_ActivityI_task.setTarget(elementtype_TaskI);
	    references.add(referencetype_ActivityI_task);
	       
        references = elementtype_DefaultDocumentCondition.getReferences();
        
        // setting the coordinations (all except the last two would be the default)
        CoordinationSet cset ;
        Synchronisation synch;

        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_CreateCase);                
        elementtype_Process.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Process_tasks);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Process.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Login);                
        elementtype_Agent.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Logout);                
        elementtype_Agent.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);                
        elementtype_Agent.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);                
        elementtype_Agent.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_ActivityO_assignedTo);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_ActivityO.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityC);                
        elementtype_Transition.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivityC);                
        elementtype_Transition.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Remove);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Transition_in);
        synch.setEventType(eventtype_Remove);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);                
        elementtype_Transition.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Add);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Transition_out);
        synch.setEventType(eventtype_Add);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);                
        elementtype_Transition.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Remove);                
        elementtype_Place.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Add);                
        elementtype_Place.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Remove);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Arc_sourcePlace);
        synch.setEventType(eventtype_Remove);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Arc.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_Add);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Arc_targetPlace);
        synch.setEventType(eventtype_Add);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Arc.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Activity_aspects);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Activity_aspects_3);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Activity.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);                
        elementtype_ActivityC.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivityC);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_ActivityC_task);
        synch.setEventType(eventtype_FinishActivityC);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_ActivityC.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Case_process);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Case_aspects_2);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Case_aspects_3);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Case_aspects);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Case.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_CreateCase);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Case_process);
        synch.setEventType(eventtype_CreateCase);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Case.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);                
        elementtype_Task.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_CaseC_state);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_CaseC.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_CaseO_involved);
        synch.setEventType(eventtype_StartActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_CaseO.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);                
        elementtype_Marking.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityC);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Marking_petrinet);
        synch.setEventType(eventtype_StartActivityC);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Marking.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityC);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_PetriNet_tasks);
        synch.setEventType(eventtype_StartActivityC);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_PetriNet.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivity);                
        elementtype_CaseI.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityI);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_CaseI_process);
        synch.setEventType(eventtype_StartActivityI);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_CaseI.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityI);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_Information_tasks);
        synch.setEventType(eventtype_StartActivityI);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_Information.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityI);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_TaskI_in);
        synch.setEventType(eventtype_StartActivityI);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_TaskI_start);
        synch.setEventType(eventtype_StartActivityI);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);                
        elementtype_TaskI.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_TaskI_out);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_TaskI_finish);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ALL);
        cset.getSynchronisations().add(synch);                
        elementtype_TaskI.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityI);                
        elementtype_DefaultDocumentDescriptor.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);                
        elementtype_DefaultDocumentDescriptor.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);
        synch = ecno_factory.createSynchronisation();
        synch.setReference(referencetype_ActivityI_task);
        synch.setEventType(eventtype_FinishActivity);
        synch.setType(SynchronisationType.ONE);
        cset.getSynchronisations().add(synch);                
        elementtype_ActivityI.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_StartActivityI);                
        elementtype_DefaultDocumentCondition.getCoordinationSets().add(cset);
        
        cset = ecno_factory.createCoordinationSet();
        cset.setTriggerEvent(eventtype_FinishActivity);                
        elementtype_DefaultDocumentCondition.getCoordinationSets().add(cset);
        
    }
    
	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		if (type.equals(eventtype_CreateCase)) {
			return workflow.events.CreateCase.class;
		} else 	
		if (type.equals(eventtype_Login)) {
			return workflow.events.Login.class;
		} else 	
		if (type.equals(eventtype_Logout)) {
			return workflow.events.Logout.class;
		} else 	
		if (type.equals(eventtype_Pull)) {
			return workflow.events.Pull.class;
		} else 	
		if (type.equals(eventtype_FinishActivity)) {
			return workflow.events.FinishActivity.class;
		} else 	
		if (type.equals(eventtype_Add)) {
			return workflow.events.Add.class;
		} else 	
		if (type.equals(eventtype_Remove)) {
			return workflow.events.Remove.class;
		} else 	
		if (type.equals(eventtype_StartActivity)) {
			return workflow.events.StartActivity.class;
		} else 	
		if (type.equals(eventtype_StartActivityC)) {
			return workflow.events.StartActivityC.class;
		} else 	
		if (type.equals(eventtype_FinishActivityC)) {
			return workflow.events.FinishActivityC.class;
		} else 	
		if (type.equals(eventtype_StartActivityI)) {
			return workflow.events.StartActivityI.class;
		} else 		{ 
          return null; 
        }
	}

	public static WorkflowEcnoModel getModel(ExecutionEngine engine) {
	    return new WorkflowEcnoModel(engine);
	}

}
