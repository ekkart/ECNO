/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.provider;

import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.BehaviourstatesPackage;
import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.util.BehaviourstatesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import java.util.List;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourstatesItemProviderAdapterFactory extends BehaviourstatesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(BehaviourstatesEditPlugin.INSTANCE, BehaviourstatesPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviourstatesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.BehaviourStates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviourStatesItemProvider behaviourStatesItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.BehaviourStates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviourStatesAdapter() {
		if (behaviourStatesItemProvider == null) {
			behaviourStatesItemProvider = new BehaviourStatesItemProvider(this);
		}

		return behaviourStatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.DefaultState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultStateItemProvider defaultStateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.DefaultState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultStateAdapter() {
		if (defaultStateItemProvider == null) {
			defaultStateItemProvider = new DefaultStateItemProvider(this);
		}

		return defaultStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.PTNetState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PTNetStateItemProvider ptNetStateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.PTNetState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPTNetStateAdapter() {
		if (ptNetStateItemProvider == null) {
			ptNetStateItemProvider = new PTNetStateItemProvider(this);
		}

		return ptNetStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.InheritedBehaviourState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritedBehaviourStateItemProvider inheritedBehaviourStateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.InheritedBehaviourState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritedBehaviourStateAdapter() {
		if (inheritedBehaviourStateItemProvider == null) {
			inheritedBehaviourStateItemProvider = new InheritedBehaviourStateItemProvider(this);
		}

		return inheritedBehaviourStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.DefaultContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultContainerItemProvider defaultContainerItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.DefaultContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultContainerAdapter() {
		if (defaultContainerItemProvider == null) {
			defaultContainerItemProvider = new DefaultContainerItemProvider(this);
		}

		return defaultContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ElementBehaviourState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementBehaviourStateItemProvider elementBehaviourStateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ElementBehaviourState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementBehaviourStateAdapter() {
		if (elementBehaviourStateItemProvider == null) {
			elementBehaviourStateItemProvider = new ElementBehaviourStateItemProvider(this);
		}

		return elementBehaviourStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ControllerConfigurator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerConfiguratorItemProvider controllerConfiguratorItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ControllerConfigurator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerConfiguratorAdapter() {
		if (controllerConfiguratorItemProvider == null) {
			controllerConfiguratorItemProvider = new ControllerConfiguratorItemProvider(this);
		}

		return controllerConfiguratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ObjectReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectReferenceItemProvider objectReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ObjectReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectReferenceAdapter() {
		if (objectReferenceItemProvider == null) {
			objectReferenceItemProvider = new ObjectReferenceItemProvider(this);
		}

		return objectReferenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (behaviourStatesItemProvider != null) behaviourStatesItemProvider.dispose();
		if (defaultStateItemProvider != null) defaultStateItemProvider.dispose();
		if (ptNetStateItemProvider != null) ptNetStateItemProvider.dispose();
		if (inheritedBehaviourStateItemProvider != null) inheritedBehaviourStateItemProvider.dispose();
		if (defaultContainerItemProvider != null) defaultContainerItemProvider.dispose();
		if (elementBehaviourStateItemProvider != null) elementBehaviourStateItemProvider.dispose();
		if (controllerConfiguratorItemProvider != null) controllerConfiguratorItemProvider.dispose();
		if (objectReferenceItemProvider != null) objectReferenceItemProvider.dispose();
	}

}
