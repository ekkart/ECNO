<%@ jet package="dk.dtu.imm.se.ecno.model.generator.internal.jet.translated"
    class="ECNO_I2J"
    skeleton="ECNO_I2JSkeleton.java" 
%>
<% 
   initialize(argument);
%>
/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines an ECNO Instance which can
 * be started via the main method (Run As -> Java Application).
 */
<% if (!packageName.equals("")) { %>
package <%= packageName %>;
<% } %>

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.gui.ECNOGUI;

public class <%= className %> {

<% for (String uri: instancecontext.getPackageURIs()) {
     Context context = instancecontext.getContext(uri); %>
    final private <%= context.getClassPackage(null) + "." + context.getEmfgenpackage().getPrefix() + "Factory"%> <%= instancecontext.getPackageVariable(uri) %>;
<% } %>

	public <%= className %>() {
<% for (String uri: instancecontext.getPackageURIs()) {
     Context context = instancecontext.getContext(uri); %>
		<%= instancecontext.getPackageVariable(uri) %> = <%= context.getClassPackage(null) + "." + context.getEmfgenpackage().getPrefix() + "Factory" %>.eINSTANCE;
<% } %>
	}

	EObject createInstance(ExecutionEngine engine) {
		// Create the objects
<% for (EObject object: contents) {
     EClass eClass = object.eClass();
     Context context = instancecontext.getContext(object);
%>
        <%= context.getClassPackage(eClass) %>.<%= context.getClassName(eClass) %> <%= instancecontext.getObjectName(object) %> = <%= instancecontext.getPackageVariable(object) %>.create<%= context.getClassName(eClass) %>();
<% } %>	

		// Set the (simple) attributes
<% for (EObject object: contents) {
     Map<String,String> attributes = instancecontext.getAttributes(object);
     for (String attribute: attributes.keySet()) { %>
        <%= instancecontext.getObjectName(object) %>.set<%= attribute %>(<%= attributes.get(attribute) %>);
<%   }
   } %>	
   
		// Create the single references
<% for (EObject object: contents) {
     Map<String,String> links = instancecontext.getSingleLinks(object);
     for (String ref: links.keySet()) { %>
        <%= instancecontext.getObjectName(object) %>.set<%= ref %>(<%= links.get(ref) %>);
<%   }
   } %>	

		// Create the multi references
<% for (EObject object: contents) {
     Map<String,List<String>> links = instancecontext.getMultiLinks(object);
     for (String ref: links.keySet()) { 
       for (String value: links.get(ref)) { %>
        <%= instancecontext.getObjectName(object) %>.get<%= ref %>().add(<%= value %>);
<%     } 
     }
   } %>	
   		
		// Register the GUI objects with the controllers (objects 
		// not visible at a GUI will be added to the engine on the fly)
<% for (EObject object:  instancecontext.getGUIObjects()) { %>
        engine.addElement(<%= instancecontext.getObjectName(object) %>);
<% } %>
		return o1;
	}

    public static void main(String[] args) {
    	ExecutionEngine engine = ExecutionEngine.createNewInstance();
<% for (Context context: instancecontext.getContexts()) { %>
    	engine.addPackageAdapter(<%= context.getQualifiedModelClassName() %>.getModel(engine));
<% } %>
    	if (!engine.resolveNamespaceImports()) {
    		System.err.println("Package imports could not be resolved");
    	}
    	new ECNOGUI(engine);
    	<%= className %> instance = new <%= className %>();
    	instance.createInstance(engine);
    }

}
