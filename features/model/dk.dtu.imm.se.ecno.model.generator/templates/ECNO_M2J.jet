<%@ jet package="dk.dtu.imm.se.ecno.model.generator.internal.jet.translated"
    class="ECNO_M2J"
    skeleton="ECNO_M2JSkeleton.java"
%>
<%
   initialize(argument);
%>
/**
 * This is an automatically generated class. It was generated by the
 * ECNO framework. This class defines ECNO Model and provides the
 * adapter to the ECNO EMF engine.
 */
<% if (!packageName.equals("")) { %>
package <%= packageName %>;
<% } %>

import org.eclipse.emf.common.util.EList;

import <%= context.getClassPackage(null) + "." + context.getEmfgenpackage().getPrefix() + "Package" %>;
import <%= context.getBehaviourClassPath() %>.<%= context.getBehaviourClassName() %>;

import dk.dtu.imm.se.ecno.core.IEventType;
import dk.dtu.imm.se.ecno.core.IEventTypeExtension;

import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
import dk.dtu.imm.se.ecno.runtime.EventExtension_Values;
import dk.dtu.imm.se.ecno.runtime.Event_Values;

import dk.dtu.imm.se.ecno.model.adapter.EMFPackageAdapter;
<% if (mcontext.hasCoordinationSets()) { %>
import dk.dtu.imm.se.ecno.model.ecno.CoordinationSet;
<% } %>
import dk.dtu.imm.se.ecno.model.ecno.EcnoFactory;
import dk.dtu.imm.se.ecno.model.ecno.ElementType;
<% if (!mcontext.getEvents().isEmpty()) { %>
import dk.dtu.imm.se.ecno.model.ecno.EventType;
<% } %>
<% if (!mcontext.getEventTypeExtensions().isEmpty()) { %>
import dk.dtu.imm.se.ecno.model.ecno.EventTypeExtension;
<% } %>
<% if (!mcontext.getParameters().isEmpty()) { %>
import dk.dtu.imm.se.ecno.model.ecno.FormalParameter;
<% } %>
<% if (!mcontext.getReferences().isEmpty()) { %>
import dk.dtu.imm.se.ecno.model.ecno.Reference;
<% } %>
<% if (mcontext.hasSynchronisations()) { %>
import dk.dtu.imm.se.ecno.model.ecno.Synchronisation;
import dk.dtu.imm.se.ecno.model.ecno.SynchronisationType;
<% } %>

public class <%= className %> extends EMFPackageAdapter {

<% for (FormalParameter param: mcontext.getParameters()) { %>
	private FormalParameter <%= mcontext.getVariableName(param) %>;
<% } %>

<% for (EventType event: mcontext.getEvents()) { %>
	private EventType <%= mcontext.getVariableName(event) %>;
<% } %>

<% for (EventTypeExtension eventTypeExtension: mcontext.getEventTypeExtensions()) { %>
	private EventTypeExtension <%= mcontext.getVariableName(eventTypeExtension) %>;
<% } %>

<% for (ElementType element: mcontext.getElements()) { %>
	private ElementType <%= mcontext.getVariableName(element) %>;
<% } %>

<% for (Reference reference: mcontext.getReferences()) { %>
	private Reference <%= mcontext.getVariableName(reference) %>;
<% } %>


	private <%= className %>(ExecutionEngine engine) {
		super (new <%= context.getBehaviourClassName() %>(engine));
		createModel();
	}

	protected void createModel() {
		EcnoFactory ecno_factory = EcnoFactory.eINSTANCE;
		<%= context.getEmfgenpackage().getPrefix() %>Package pack = <%= context.getEmfgenpackage().getPrefix() %>Package.eINSTANCE;

		getNamespace().setEPackage(pack);
<% if (context.getEcnopackage().getUri() != null) { %>
		getNamespace().setUri("<%= context.getEcnopackage().getUri() %>");
<% } %>

<% for (FormalParameter param: mcontext.getParameters()) { %>
		<%= mcontext.getVariableName(param) %> = ecno_factory.createFormalParameter();
		<%= mcontext.getVariableName(param) %>.setName("<%= param.getName() %>");
		<%= mcontext.getVariableName(param) %>.setEType(<%= mcontext.getPackageClassAccess(param.getEType()) %>);
<%   if (param.isCollective()) { %>
		<%= mcontext.getVariableName(param) %>.setCollective(true);
<%   } %>
<% } %>

<% if (!mcontext.getParameters().isEmpty()) { %>
		EList<FormalParameter> parameters;
		
<% } %>
<% for (EventType event: mcontext.getEvents()) { %>
		<%= mcontext.getVariableName(event) %> = ecno_factory.createEventType();
		<%= mcontext.getVariableName(event) %>.setName("<%= event.getName() %>");
<%   if (event.isGui()) { %>
		<%= mcontext.getVariableName(event) %>.setGui(true);
<%   } %>
<%   if (event.isImported()) { %>
		<%= mcontext.getVariableName(event) %>.setPackageURI("<%= event.getPackageURI() %>");
		<%= mcontext.getVariableName(event) %>.setTypeName("<%= event.getTypeName() %>");
<%   } %>
<% if (!event.getParameters().isEmpty()) { %>
		parameters = <%= mcontext.getVariableName(event) %>.getParameters();
<% } %>
<%   for (FormalParameter param: event.getParameters()) { %>
		parameters.add(<%= mcontext.getVariableName(param) %>);
<%   } %>
		addEventType(<%= mcontext.getVariableName(event) %>);

<% } %>
<% for (EventType event: mcontext.getEvents()) {
     if (event.getSuper() != null) { %>
		<%= mcontext.getVariableName(event) %>.setSuper(<%= mcontext.getVariableName(event.getSuper()) %>);
<%   }
   } %>

<% for (EventTypeExtension eventTypeExtension: mcontext.getEventTypeExtensions()) { %>
		<%= mcontext.getVariableName(eventTypeExtension) %> = ecno_factory.createEventTypeExtension();
		<%= mcontext.getVariableName(eventTypeExtension) %>.setName("<%= eventTypeExtension.getName() %>");
		<%= mcontext.getVariableName(eventTypeExtension) %>.setBase(<%= mcontext.getVariableName(eventTypeExtension.getBase()) %>);
<%   if (eventTypeExtension.isImported()) { %>
		<%= mcontext.getVariableName(eventTypeExtension) %>.setPackageURI("<%= eventTypeExtension.getPackageURI() %>");
		<%= mcontext.getVariableName(eventTypeExtension) %>.setTypeName("<%= eventTypeExtension.getTypeName() %>");
<%   } %>
		parameters = <%= mcontext.getVariableName(eventTypeExtension) %>.getParameters();
<%   for (FormalParameter param: eventTypeExtension.getParameters()) { %>
		parameters.add(<%= mcontext.getVariableName(param) %>);
<%   } %>
		addEventTypeExtension(<%= mcontext.getVariableName(eventTypeExtension) %>);

<% } %>
<% for (EventTypeExtension eventTypeExtension: mcontext.getEventTypeExtensions()) {
      Set<String> keys = eventTypeExtension.getSuper().keySet();
      for (String key: keys) { %>
		<%= mcontext.getVariableName(eventTypeExtension) %>.getSuper().put("<%= key %>", <%= mcontext.getVariableName(eventTypeExtension.getSuper().get(key)) %>);
<%    }
      if (!keys.isEmpty()) { %>

<%    }
   } %>

<% for (ElementType element: mcontext.getElements()) { %>
		<%= mcontext.getVariableName(element) %> = ecno_factory.createElementType();
<%   if (element.isImported()) { %>
		<%= mcontext.getVariableName(element) %>.setPackageURI("<%= element.getPackageURI() %>");
		<%= mcontext.getVariableName(element) %>.setTypeName("<%= element.getTypeName() %>");
<%   } else { %>
		<%= mcontext.getVariableName(element) %>.setEClass(<%= mcontext.getPackageClassAccess(element.getEClass()) %>);
<%   }
     for (EventType event: element.getParallelTriggerEvents()) { %>
		<%= mcontext.getVariableName(element) %>.getParallelTriggerEvents().add(<%= mcontext.getVariableName(event) %>);
<%   }
     if (element.isGui()) { %>
		<%= mcontext.getVariableName(element) %>.setGui(true);
<%   } %>
		addElementType(<%= mcontext.getVariableName(element) %>);

<% } %>

<% for (ElementType element: mcontext.getElements()) {	
     if (element.getSuper() != null) { %>
		<%= mcontext.getVariableName(element) %>.setSuper(<%= mcontext.getVariableName(element.getSuper()) %>);
<%   }
   }   %>

<% if (!mcontext.getReferences().isEmpty()) { %>
		EList<Reference> references;

<% } %>
<% for (ElementType element: mcontext.getElements()) { 
     if (!element.getReferences().isEmpty()) { %>
		references = <%= mcontext.getVariableName(element) %>.getReferences();
<%     for (Reference reference: element.getReferences()) { %>
		<%= mcontext.getVariableName(reference) %> = ecno_factory.createReference();
		<%= mcontext.getVariableName(reference) %>.setEReference(<%= mcontext.getPackageReferenceAccess(reference.getEReference()) %>);
		<%= mcontext.getVariableName(reference) %>.setTarget(<%= mcontext.getVariableName(reference.getTarget()) %>);
		references.add(<%= mcontext.getVariableName(reference) %>);

<%     }
     }
   } %>

<% if (mcontext.hasSynchronisations()) { %>
		Synchronisation synch;
<% } %>
<% if (mcontext.hasCoordinationSets()) { %>
		CoordinationSet cset;

<% } %>
<% for (ElementType element: mcontext.getElements()) { %>
<%   for (CoordinationSet cset: element.getCoordinationSets()) { %>
		cset = ecno_factory.createCoordinationSet();
		cset.setTriggerEvent(<%= mcontext.getVariableName(cset.getTriggerEvent()) %>);
<%     if (cset.getPriority() != 0) { %>
		cset.setPriority(<%= cset.getPriority() %>);
<%     } %>
<%     for (Synchronisation synch: cset.getSynchronisations()) { %>
		synch = ecno_factory.createSynchronisation();
		synch.setReference(<%= mcontext.getVariableName(synch.getReference()) %>);
		synch.setEventType(<%= mcontext.getVariableName(synch.getEventType()) %>);
		synch.setType(SynchronisationType.<%= synch.getType() %>);
		cset.getSynchronisations().add(synch);
<%     } %>
		<%= mcontext.getVariableName(element) %>.getCoordinationSets().add(cset);

<%   }
   } %>
	}

	public Class<? extends Event_Values> getEventValuesClass(IEventType type) {
		
<% for (EventType event: mcontext.getEvents()) {
     if (event.getFormalParametersList().size() > 0 ) {
		%>if (type.equals(<%= mcontext.getVariableName(event) %>)) {
			return <%= context.getEventValueClassQualifiedName(event.getName()) %>.class;
		} else <%
     }
   } %>{
			return null;
		}
	}

	public Class<? extends EventExtension_Values> getEventValuesClass(IEventTypeExtension eventTypeExtension) {
		
<% for (EventTypeExtension eventTypeExtension: mcontext.getEventTypeExtensions()) {
		%>if (eventTypeExtension.equals(<%= mcontext.getVariableName(eventTypeExtension) %>)) {
			return <%= context.getEventValueClassQualifiedName(eventTypeExtension.getName()) %>.class;
		} else <%
   }  %>{
			return null;
		}
	}

	public static <%= className %> getModel(ExecutionEngine engine) {
		return new <%= className %>(engine);
	}

}
