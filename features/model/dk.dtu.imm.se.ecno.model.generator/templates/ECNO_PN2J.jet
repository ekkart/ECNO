<%@ jet package="dk.dtu.imm.se.ecno.model.generator.internal.jet.translated"
    class="ECNO_PN2J"
    skeleton="ECNO_PN2JSkeleton.java" 
%>
<%
  initialize(argument);
%>
/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of an element, as defined by the Petri net.
 */
<% if (!packageName.equals("")) { %>
package <%= packageName %>;
<% } %>

import org.eclipse.emf.ecore.EObject;

import dk.dtu.imm.se.ecno.model.runtime.pn.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.model.runtime.pn.PetriNetChoice;
import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.core.IElementType;
import dk.dtu.imm.se.ecno.core.IPackageAdapter;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;
<%
  for (Imports imp: imports) {
    String impText = imp.getText();
    if (impText != null) {
%>

<%= imp.getText() %>
<%  }
  }
%> 

@SuppressWarnings("unused")
public class <%= className %> extends AbstractPetrinetBehaviour<<%= selfClassQualifiedName %>> {

<%
  for (AttributeDeclarations attribute: attributeDeclarations) {
    String attributeText = attribute.getText();
    if (attributeText != null) {
%>

<%= attributeText %>
<%  }
  }
%>	
	public <%= className %>(ExecutionEngine engine, IElementType type,  EObject element) {
		super(engine, (<%= selfClassQualifiedName %>) element, new int[]{<% 
   for (int i=0; i < noPlaces; i++) {
   %><%= i!=0?", ":"" %><%= getPlaceMarking(i) %><% 
   }
                         %>}, new String[]{<% 
   for (int i=0; i < noTransitions; i++) {
%><%= i!=0?", ":"" %>"<%= getNodeName(getTransition(i)) %>"<% 
   }
                                            %>}, type );
	}
	
	@Override
	public boolean enabled(int t) {
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
			return <%
	boolean first = true;
    for (Arc arc: flatnet.getIn(getTransition(i))) { 
%><%= !first?" && ":"" %>marking.get(<%= getPlaceNo(arc.getSource()) %>) >= 1
<%    first=false;
    }
%><%= first?"true":"" %>;

<%
  }
%>
		default:
			return false;	
		}
	}
	
	@Override
	public void consumeTokens(int t, int[] m) {
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
<%
    for (Arc arc: flatnet.getIn(getTransition(i))) { 
%>
			m[<%= getPlaceNo(arc.getSource()) %>]--;
<%
    }
%>
			break;

<%
  }
%>
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
			return <%= getTransitionDropParent(i) %>;
<%
  }
%>
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
<%
    for (Arc arc: flatnet.getIn(getTransition(i))) { %>
			marking.set(<%= getPlaceNo(arc.getSource()) %>, marking.get(<%= getPlaceNo(arc.getSource()) %>) - 1);
<%
    }

    for (Arc arc: flatnet.getOut(getTransition(i))) { %>
			marking.set(<%= getPlaceNo(arc.getTarget()) %>,  marking.get(<%= getPlaceNo(arc.getTarget()) %>) + 1);
<%
    }
%>
			break;
			
<% }
%>
		}
	}
	
	@Override
	public boolean doesAssignParam(int transition, int event, int param) {
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>:
			switch (event) {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    int i=0;
    for (EventUse eventUse: eventUses) { %>
			case <%= i %>:
				switch (param) {
<%    int j=0;
      for (JavaExpression expr: eventUse.getExpression()) { %>
				case <%= j %>: return <%= !expr.getCode().equals("none") %>;			
<%      j++;
      }
%>    
				default: return false;
				}
<%    i++;
    }
%>
			default: return false;
			}
<%
  }
%>
		default: return false;
		}
	}

	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		<%= selfClassQualifiedName %> self = self();
				
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) {
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
      eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
			<%= context.getEventValueClassQualifiedName(eventUse.getType()) %> <%= eventUse.getName() %> = 
				(<%= context.getEventValueClassQualifiedName(eventUse.getType()) %>) choice.getEventValues("<%= eventUse.getType() %>");
<%    }
    }
%>
			switch (event) {
<%  int i=0;
    for (EventUse eventUse: eventUses) { %>
			case <%= i %>:
				switch (param) {
<%    int j=0;
      for (JavaExpression expr: eventUse.getExpression()) { 
        if (!expr.getCode().equals("none")) {
%>
				/**
				 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_START %> <%= ECNO_M2JGeneratorUtil.findObjectURI(eventBinding) %>
				 */
				case <%= j %>: return <%= expr.getCode() %>;
				/**
				 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_END %> <%= ECNO_M2JGeneratorUtil.findObjectURI(eventBinding) %>
				 */
<%      }
        j++;
      }
%>
				default: return null;
				}
<%    i++;
    }
%>
			default: return null;
			}
		}
<%
  }
%>
		default: return null;
		}
	}

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		<%= selfClassQualifiedName %> self = self();
		
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
			<%= context.getEventValueClassQualifiedName(eventUse.getType()) %> <%= eventUse.getName() %> = 
				(<%= context.getEventValueClassQualifiedName(eventUse.getType()) %>) choice.getEventValues("<%= eventUse.getType() %>");
<%    }
    }		
    
    Condition condition = transition.getCondition();
    String conditionText = "true";
    if (condition != null && condition.getStructure() != null) {
      JavaExpression expression = condition.getStructure();
      if (expression != null) {
        conditionText = expression.getCode();
      }
    }
%>
			/**
			 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_START %> <%= ECNO_M2JGeneratorUtil.findObjectURI(condition) %>
			 */
			return <%= conditionText %>;
			/**
			 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_END %> <%= ECNO_M2JGeneratorUtil.findObjectURI(condition) %>
			 */
		}
<%
  }
%>
		default: return false;
		}
	}

	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		ParentAction parent = new ParentAction(choice);
		// Note that this attribute self will be deleted in future versions 
		// of the ECNO code generator for ECNO nets. Therefore, the method
		// self() should be used instead of the variable self in your 
		// ECNO Net Java code snippets.
		<%= selfClassQualifiedName %> self = self();
		
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
			<%= context.getEventValueClassQualifiedName(eventUse.getType()) %> <%= eventUse.getName() %> =
				(<%= context.getEventValueClassQualifiedName(eventUse.getType()) %>) choice.getEventValues("<%= eventUse.getType() %>");
<%    }
    }
    
    Action action = transition.getAction();
    String actionText = "/* DO NOTHING */";
    if (action != null && action.getStructure() != null) {
      JavaStatement statement = action.getStructure();
      if (statement != null) {
        actionText = statement.getCode();
      }
    }
%>
			/**
			 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_START %> <%= ECNO_M2JGeneratorUtil.findObjectURI(transition.getAction()) %>
			 */
<%= actionText %>
			/**
			 * <%= ECNO_M2JGeneratorUtil.SEE_PNML_END %> <%= ECNO_M2JGeneratorUtil.findObjectURI(transition.getAction()) %>
			 */
			fire(transition);
			return;
		}
<%
  }
%>
		default: return;
		}
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>: 
			return new String[] { <%
    EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    boolean first = true;
    for (EventUse eventUse: eventUses) { %><%= !first?", ":"" %>"<%= eventUse.getType() %>"<%
      first = false;
    }
                                                                                         %> };
<%
  }
%>
		default: return null;
		}
	}

}

