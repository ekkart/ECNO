/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package dk.dtu.imm.se.ecno.pn.ecnonets.provider;

import dk.dtu.imm.se.ecno.pn.ecnonets.util.EcnonetsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EcnonetsItemProviderAdapterFactory extends EcnonetsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EcnonetsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.ECNONet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECNONetItemProvider ecnoNetItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.ECNONet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECNONetAdapter() {
		if (ecnoNetItemProvider == null) {
			ecnoNetItemProvider = new ECNONetItemProvider(this);
		}

		return ecnoNetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventBindingItemProvider eventBindingItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventBindingAdapter() {
		if (eventBindingItemProvider == null) {
			eventBindingItemProvider = new EventBindingItemProvider(this);
		}

		return eventBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventUses} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventUsesItemProvider eventUsesItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventUses}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventUsesAdapter() {
		if (eventUsesItemProvider == null) {
			eventUsesItemProvider = new EventUsesItemProvider(this);
		}

		return eventUsesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventUseItemProvider eventUseItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.EventUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventUseAdapter() {
		if (eventUseItemProvider == null) {
			eventUseItemProvider = new EventUseItemProvider(this);
		}

		return eventUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.JavaExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaExpressionItemProvider javaExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.JavaExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaExpressionAdapter() {
		if (javaExpressionItemProvider == null) {
			javaExpressionItemProvider = new JavaExpressionItemProvider(this);
		}

		return javaExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.JavaStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaStatementItemProvider javaStatementItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.JavaStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaStatementAdapter() {
		if (javaStatementItemProvider == null) {
			javaStatementItemProvider = new JavaStatementItemProvider(this);
		}

		return javaStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.Imports} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportsItemProvider importsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.Imports}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportsAdapter() {
		if (importsItemProvider == null) {
			importsItemProvider = new ImportsItemProvider(this);
		}

		return importsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.AttributeDeclarations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeDeclarationsItemProvider attributeDeclarationsItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.AttributeDeclarations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeDeclarationsAdapter() {
		if (attributeDeclarationsItemProvider == null) {
			attributeDeclarationsItemProvider = new AttributeDeclarationsItemProvider(this);
		}

		return attributeDeclarationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.imm.se.ecno.pn.ecnonets.NamedParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedParameterItemProvider namedParameterItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.imm.se.ecno.pn.ecnonets.NamedParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedParameterAdapter() {
		if (namedParameterItemProvider == null) {
			namedParameterItemProvider = new NamedParameterItemProvider(this);
		}

		return namedParameterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ecnoNetItemProvider != null) ecnoNetItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (eventBindingItemProvider != null) eventBindingItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (eventUsesItemProvider != null) eventUsesItemProvider.dispose();
		if (eventUseItemProvider != null) eventUseItemProvider.dispose();
		if (javaExpressionItemProvider != null) javaExpressionItemProvider.dispose();
		if (javaStatementItemProvider != null) javaStatementItemProvider.dispose();
		if (importsItemProvider != null) importsItemProvider.dispose();
		if (attributeDeclarationsItemProvider != null) attributeDeclarationsItemProvider.dispose();
		if (namedParameterItemProvider != null) namedParameterItemProvider.dispose();
	}

}
