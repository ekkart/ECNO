<%@ jet package="dk.dtu.imm.se.ecno.pn.generator.internal.jet.translated"
    class="ECNOPN2Java"
    skeleton="ECNOPN2JavaSkeleton.java" 
%>
<%
  PetriNet pn = (PetriNet) argument; 
  initialize(pn);
%>
/**
 * This is an automatically generated class. It was generated by the
 * Petri net component of the ECNO framework. This class defines
 * the behaviour of a element, as defined by the Petri net.
 */
<% if (!packageName.equals("")) { %>
package <%= Utils.getPath(pn.getName().getText()) %>;
<% } %>

import dk.dtu.imm.se.ecno.runtime.ParentAction;
import dk.dtu.imm.se.ecno.engine.ExecutionEngine;

import dk.dtu.imm.se.ecno.pn.model.ElementType;
import dk.dtu.imm.se.ecno.pn.runtime.AbstractPetrinetBehaviour;
import dk.dtu.imm.se.ecno.pn.runtime.Element;
import dk.dtu.imm.se.ecno.pn.runtime.PetriNetChoice;
<%
  for (Imports imp: imports) {
    String impText = imp.getText();
    if (impText != null) {
%>

<%= imp.getText() %>
<%  }
  }
%>

public class <%= className %> extends AbstractPetrinetBehaviour {

<%
  for (AttributeDeclarations attribute: attributeDeclarations) {
    String attributeText = attribute.getText();
    if (attributeText != null) {
%>
<%= attributeText %>
<%  }
  }
%> 

	public <%= className %>(ExecutionEngine engine, ElementType type, Element self) {
		super(engine, new int[]{<% 
   for (int i=0; i < noPlaces; i++) {
   %><%= i!=0?", ":"" %><%= getPlaceMarking(i) %><% 
   }
                         %>}, new String[]{<% 
   for (int i=0; i < noTransitions; i++) {
%><%= i!=0?", ":"" %>"<%= getNodeName(getTransition(i)) %>"<% 
   }
                                            %>}, type, self);
	}

	@Override
	public boolean enabled(int t) {
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
			return <%
	boolean first = true;
    for (Arc arc: flatnet.getIn(getTransition(i))) { 
%><%= !first?" && ":"" %>marking[<%= getPlaceNo(arc.getSource()) %>] >= 1
<%    first=false;
    }
%><%= first?"true":"" %>;
                    
<%
  }
%>
		default:
			return false;	
		}
	}

	@Override
	public boolean dropParentChoice(int t) {
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:
			return <%= getTransitionDropParent(i) %>;                    
<%
  }
%>
		default:
			return false;	
		}
	}

	@Override
	public void fireImpl(int t) {
		if (! enabled(t))
			return;
		
		switch (t) {
<%
  for (int i=0; i < noTransitions; i++) { %>
		case <%= i %>:		
<%
    for (Arc arc: flatnet.getIn(getTransition(i))) { %>
			marking[<%= getPlaceNo(arc.getSource()) %>] =  marking[<%= getPlaceNo(arc.getSource()) %>] - 1;
<%
    }

    for (Arc arc: flatnet.getOut(getTransition(i))) { %>
			marking[<%= getPlaceNo(arc.getTarget()) %>] =  marking[<%= getPlaceNo(arc.getTarget()) %>] + 1;
<%
    }
%>
			break;
			
<% }
%>			
		}
	}
	
	@Override
	public boolean doesAssignParam(int transition, int event, int param) {
		switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>:
			switch (event) {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    int i=0;
    for (EventUse eventUse: eventUses) { %>
			case <%= i %>:
				switch (param) {
<%    int j=0;
      for (JavaExpression expr: eventUse.getExpression()) { %>
				case <%= j %>: return <%= !expr.getCode().equals("none") %>;			
<%      j++;
      }
%>    
                default: return false;
                }
<%    i++;                
    }
%>
			default: return false;
			}
<%
  }
%>
		default: return false;
		}  
	}	
	
	@Override
	public Object getParamAssignment(PetriNetChoice choice, int event, int param) {
		int transition = choice.getTransition();
		{
			<%= parentPackageName %>.<%= className %> self = (<%= parentPackageName %>.<%= className %>) getElement();		
			switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
			case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
				Event<%= eventUse.getType() %>_Values <%= eventUse.getName() %> = (Event<%= eventUse.getType() %>_Values) choice.getEventValues("<%= eventUse.getType() %>");
<%    }           
    }		
%>
				switch (event) {
<%  int i=0;
    for (EventUse eventUse: eventUses) { %>
				case <%= i %>:
					switch (param) {
<%    int j=0;
      for (JavaExpression expr: eventUse.getExpression()) { 
        if (!expr.getCode().equals("none")) {
%>      
					case <%= j %>: return <%= expr.getCode() %>;			
<%      }
        j++;
      }
%>    
                	default: return null;
                	}
<%    i++;                
    }
%>
				default: return null;
				}
			}
<%
  }
%>
			default: return null;
			}
		}
	}

	@Override
	public boolean evaluateCondition(PetriNetChoice choice) {
		int transition = choice.getTransition();
		{
			<%= parentPackageName %>.<%= className %> self = (<%= parentPackageName %>.<%= className %>) getElement();
			switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
			case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
				Event<%= eventUse.getType() %>_Values <%= eventUse.getName() %> = (Event<%= eventUse.getType() %>_Values) choice.getEventValues("<%= eventUse.getType() %>");
<%    }
    }		
    
    Condition condition = transition.getCondition();
    String conditionText = "true";
    if (condition != null && condition.getStructure() != null) {
      JavaExpression expression = condition.getStructure();
      if (expression != null) {
        conditionText = expression.getCode();
      }
    }
%>
				return <%= conditionText %>; 
			}
<%
  }
%>
			default: return false;
			}
		}
	}	
	
	@Override
	public void executeAction(PetriNetChoice choice) {
		int transition = choice.getTransition();
		{
			<%= parentPackageName %>.<%= className %> self = (<%= parentPackageName %>.<%= className %>) getElement();		
			ParentAction parent = new ParentAction(choice);
			switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
			case <%= t %>: {
<%  EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    for (EventUse eventUse: eventUses) { 
      if (eventUse.getExpression().size() > 0) { %>
				Event<%= eventUse.getType() %>_Values <%= eventUse.getName() %> = (Event<%= eventUse.getType() %>_Values) choice.getEventValues("<%= eventUse.getType() %>");
<%    }
    }		
    
    Action action = transition.getAction();
    String actionText = "/* DO NOTHING */";
    if (action != null && action.getStructure() != null) {
      JavaStatement statement = action.getStructure();
      if (statement != null) {
        actionText = statement.getCode();
      }
    }
%>
<%= actionText %>
            	fire(transition);
				return; 
			}
<%
  }
%>
			default: return;
			}
		}
	}	
	
	@Override
	public String[] getTransitionEvents(int transition) {
			switch (transition) {
<%
  for (int t=0; t< noTransitions; t++) { 
    dk.dtu.imm.se.ecno.pn.ecnonets.Transition transition = (dk.dtu.imm.se.ecno.pn.ecnonets.Transition) getTransition(t); %>
		case <%= t %>: 
			return new String[] { <%
    EventBinding eventBinding = transition.getEventbinding();
    List<EventUse> eventUses = new ArrayList<EventUse>();
    if (eventBinding != null && eventBinding.getStructure() != null ) {
		eventUses = eventBinding.getStructure().getEventuse();
    }
    boolean first = true;
    for (EventUse eventUse: eventUses) { %><%= !first?", ":"" %>"<%= eventUse.getType() %>"<%
      first = false;
    }
                                                                                         %> };
<%
  }
%>
		default: return null;
		}  
	}
		
}

