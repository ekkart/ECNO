/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package dk.dtu.compute.se.ecno.statespace.provider;

import dk.dtu.compute.se.ecno.statespace.StatespaceFactory;
import java.util.ArrayList;
import java.util.Collection;

import java.util.List;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import dk.dtu.compute.se.ecno.statespace.util.StatespaceAdapterFactory;
import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.BehaviourStates;
import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.BehaviourstatesPackage;
import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.ControllerConfigurator;
import dk.dtu.imm.se.ecno.eclipse.save.behaviourstates.util.BehaviourstatesSwitch;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatespaceItemProviderAdapterFactory extends StatespaceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatespaceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.StateSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateSpaceItemProvider stateSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.StateSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateSpaceAdapter() {
		if (stateSpaceItemProvider == null) {
			stateSpaceItemProvider = new StateSpaceItemProvider(this);
		}

		return stateSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.StateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateObjectItemProvider stateObjectItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.StateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateObjectAdapter() {
		if (stateObjectItemProvider == null) {
			stateObjectItemProvider = new StateObjectItemProvider(this);
		}

		return stateObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.ObjectFeatureValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectFeatureValuesItemProvider objectFeatureValuesItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.ObjectFeatureValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectFeatureValuesAdapter() {
		if (objectFeatureValuesItemProvider == null) {
			objectFeatureValuesItemProvider = new ObjectFeatureValuesItemProvider(this);
		}

		return objectFeatureValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dk.dtu.compute.se.ecno.statespace.StateSpaceControllerState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateSpaceControllerStateItemProvider stateSpaceControllerStateItemProvider;

	/**
	 * This creates an adapter for a {@link dk.dtu.compute.se.ecno.statespace.StateSpaceControllerState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateSpaceControllerStateAdapter() {
		if (stateSpaceControllerStateItemProvider == null) {
			stateSpaceControllerStateItemProvider = new StateSpaceControllerStateItemProvider(this);
		}

		return stateSpaceControllerStateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (stateSpaceItemProvider != null) stateSpaceItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (stateObjectItemProvider != null) stateObjectItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (objectFeatureValuesItemProvider != null) objectFeatureValuesItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (stateSpaceControllerStateItemProvider != null) stateSpaceControllerStateItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link BehaviourstatesPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class BehaviourstatesChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends BehaviourstatesSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseBehaviourStates(BehaviourStates object) {
				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createStateSpace()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createState()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createTransition()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createStateObject()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createLink()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createEvent()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createParameter()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createObjectFeatureValues()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createValue()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createElement()));

				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.BEHAVIOUR_STATES__ORPHANS,
						 StatespaceFactory.eINSTANCE.createStateSpaceControllerState()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseControllerConfigurator(ControllerConfigurator object) {
				newChildDescriptors.add
					(createChildParameter
						(BehaviourstatesPackage.Literals.CONTROLLER_CONFIGURATOR__STATE,
						 StatespaceFactory.eINSTANCE.createStateSpaceControllerState()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
		   new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
		   return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return StatespaceEditPlugin.INSTANCE;
		}
	}

}
